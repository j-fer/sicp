[{"id":"/sicpjs/5.4.4","tag":"TITLE","body":"5.4.4  \n    Running the Evaluator"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    With the implementation of the explicit-control evaluator we come to\n    the end of a development, begun in chapter 1, in which we have\n    explored successively more precise\n    \n    models of the evaluation process.\n    We started with the relatively informal substitution model, then\n    extended this in chapter 3 to the environment model, which enabled us\n    to deal with state and change.  In the metacircular evaluator of\n    chapter 4, we used\n    JavaScript\n    itself as a language for making more\n    explicit the environment structure constructed during evaluation of an\n    component.\n    Now, with register machines, we have taken a close look\n    at the evaluator's mechanisms for storage management,\n    argument passing, and control.  At\n    each new level of description, we have had to raise issues and resolve\n    ambiguities that were not apparent at the previous, less precise\n    treatment of evaluation.  To understand the behavior of the\n    explicit-control evaluator, we can simulate it and monitor its\n    performance.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    We will install a\n    \n    driver loop in our evaluator machine.  This plays\n    the role of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"driver_loop"},{"body":"function\n    of section ","tag":"#text"},{"tag":"REF","body":"4.1.4","href":"/sicpjs/4.1.4"},{"body":". The evaluator\n    will repeatedly print a prompt, read \n    a program,\n    evaluate\n    the program\n    by going to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_dispatch"},{"body":",\n      \n    and print the result.\n    \n        If nothing is entered at the prompt, we jump to the label\n        ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluator_done"},{"body":", which is\n        the last entry point in the controller. \n      \n    The following instructions form the beginning of the\n    explicit-control evaluator's controller sequence:","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/5.4.4#footnote-1"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n\"read_evaluate_print_loop\",\n  perform(list(op(\"initialize_stack\"))),\n  assign(\"comp\", list(op(\"user_read\"),\n                      constant(\"EC-evaluate input:\"))),\n  assign(\"comp\", list(op(\"parse\"), reg(\"comp\"))),\n  test(list(op(\"is_null\"), reg(\"comp\"))),\n  branch(label(\"evaluator_done\")),\n  assign(\"env\", list(op(\"get_current_environment\"))),\n  assign(\"val\", list(op(\"scan_out_declarations\"), reg(\"comp\"))),\n  save(\"comp\"),    // so we can use it to temporarily hold $\\texttt{*unassigned*}$ values\n  assign(\"comp\", list(op(\"list_of_unassigned\"), reg(\"val\"))),\n  assign(\"env\", list(op(\"extend_environment\"), \n                     reg(\"val\"), reg(\"comp\"), reg(\"env\"))),\n  perform(list(op(\"set_current_environment\"), reg(\"env\"))),\n  restore(\"comp\"), // the program \n  assign(\"continue\", label(\"print_result\")),\n  go_to(label(\"eval_dispatch\")),\n\"print_result\",\n  perform(list(op(\"user_print\"),\n               constant(\"EC-evaluate value:\"), reg(\"val\"))),\n  go_to(label(\"read_evaluate_print_loop\")), \n  "},{"body":"\n        We store the current environment, initially the global environment,\n        in the variable ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"current_environment"},{"body":"\n        and update it each time around the loop to remember past declarations.\n        The operations\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_current_environment"},{"body":" and\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"set_current_environment"},{"body":" \n\tsimply get and set this variable.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":false,"body":"let current_environment = the_global_environment;\n\nfunction get_current_environment() {\n    return current_environment;\n}\n\nfunction set_current_environment(env) {\n    current_environment = env;\n}"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    When we encounter an\n    \n    error in a\n    function\n    (such as the \n    \" error","tag":"#text"},{"body":"unknown function type","tag":"#text"},{"body":"\" error\n    indicated at\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_dispatch"},{"body":"),\n      \n    we print an error message and return to the driver loop.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/5.4.4#footnote-2"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n\"unknown_component_type\",\n  assign(\"val\", constant(\"unknown syntax\")),\n  go_to(label(\"signal_error\")),\n      \n\"unknown_function_type\",\n  restore(\"continue\"), // clean up stack (from $\\texttt{apply_dispatch}$)\n  assign(\"val\", constant(\"unknown function type\")),\n  go_to(label(\"signal_error\")),\n      \n\"signal_error\",\n  perform(list(op(\"user_print\"),\n               constant(\"EC-evaluator error:\"), reg(\"val\"))),\n  go_to(label(\"read_evaluate_print_loop\")),\n      "}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    For the purposes of the simulation, we initialize the stack each time\n    through the driver loop, since it might not be empty after an error\n    \n\t(such as an undeclared name)\n      \n    interrupts an evaluation.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/5.4.4#footnote-3"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    If we combine all the code fragments presented in sections\n    ","tag":"#text"},{"tag":"REF","body":"5.4.1","href":"/sicpjs/5.4.1"},{"body":"–","tag":"#text"},{"tag":"REF","body":"5.4.4","href":"/sicpjs/5.4.4"},{"body":",\n    we can create an\n    \n    evaluator machine model that we can run using the\n    register-machine simulator of section ","tag":"#text"},{"tag":"REF","body":"5.2","href":"/sicpjs/5.2"},{"body":".\n\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nconst eceval = make_machine(list(\"comp\", \"env\", \"val\", \"fun\",\n                                 \"argl\", \"continue\", \"unev\"),\n                            eceval_operations,\n                            list(\"read_evaluate_print_loop\",\n                                 $\\langle{}$entire machine controller as given above$\\rangle$\n                                 \"evaluator_done\"));\n      "},{"body":"\n\n    We must define \n    JavaScript functions\n    to simulate the operations used as primitives by the evaluator.  These are\n    the same\n    functions\n    we used for the metacircular evaluator in\n    section ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":", together with the few additional\n    ones defined in footnotes throughout section ","tag":"#text"},{"tag":"REF","body":"5.4","href":"/sicpjs/5.4"},{"body":".\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nconst eceval_operations = list(list(\"is_literal\", is_literal),\n                               $\\langle\\mathit{complete}\\;\\,\\mathit{list}\\;\\,\\mathit{of}\\;\\mathit{operations}\\:\\,\\mathit{for}\\;\\,\\mathit{eceval}\\;\\,\\mathit{machine}\\rangle$);\n      "}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    Finally, we can initialize the global environment and run the evaluator:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":1353,"program":"chap=4&prgrm=","body":"const the_global_environment = setup_environment();\nstart(eceval); "},{"tag":"SNIPPET","latex":false,"id":3,"eval":false,"body":"function append(x, y) {\n    return is_null(x)\t\n           ? y\n           : pair(head(x), append(tail(x), y));\n}","output":"EC-evaluate value:\nundefined"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"append(list(\"a\", \"b\", \"c\"), list(\"d\", \"e\", \"f\"));","output":"EC-evaluate value:\n[\"a\", [\"b\", [\"c\", [\"d\", [\"e\", [\"f\", null]]]]]]"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    Of course, evaluating\n    programs\n    in this way will take much longer\n    than if we had directly typed them into\n    JavaScript,\n    because of the\n    multiple levels of simulation involved.  Our\n    programs\n    are evaluated\n    by the explicit-control-evaluator machine, which is being simulated by\n    a\n    JavaScript\n    program, which is itself being evaluated by the\n    JavaScript\n    interpreter.\n  ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Monitoring the performance of the evaluator","tag":"#text"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    Simulation can be a powerful tool to guide the implementation of\n    evaluators.\n    \n    Simulations make it easy not only to explore variations\n    of the register-machine design but also to monitor the performance of\n    the simulated evaluator.  For example, one important factor in\n    performance is how efficiently the evaluator uses the stack.  We can\n    observe the number of stack operations required to evaluate various\n    programs\n    by defining the evaluator register machine with the\n    version of the simulator that collects statistics on stack use\n    (section ","tag":"#text"},{"tag":"REF","body":"5.2.4","href":"/sicpjs/5.2.4"},{"body":"), and adding an instruction at the\n    evaluator's\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"print_result"},{"body":"\n    entry point to print the statistics:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n\"print_result\",\n  perform(list(op(\"print_stack_statistics\"))), // added instruction\n  // rest is same as before\n  perform(list(op(\"user_print\"),\n               constant(\"EC-evaluate value:\"), reg(\"val\"))),\n  go_to(label(\"read_evaluate_print_loop\")),\n      "},{"body":"\n    Interactions with the evaluator now look like this:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":false},{"tag":"SNIPPET","latex":false,"id":6,"eval":false,"body":"function factorial (n) {\n    return n === 1\n           ? 1\n           : factorial(n - 1) * n;\n}","output":"total pushes = 4 \nmaximum depth = 3\nEC-evaluate value:\nundefined"},{"tag":"SNIPPET","latex":false,"id":7,"eval":false,"body":"factorial(5);","output":"total pushes = 151 \nmaximum depth = 28\nEC-evaluate value:\n120"},{"body":"\n\n    Note that the driver loop of the evaluator reinitializes the stack\n    at the start of\n    each interaction, so that the statistics printed will refer only to\n    stack operations used to evaluate the previous\n    program.","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.27","id":"#ex-5.27","child":[{"body":"\n    Use the monitored stack to explore the\n    \n    tail-recursive property of the\n    evaluator (section ","tag":"#text"},{"tag":"REF","body":"5.4.2","href":"/sicpjs/5.4.2"},{"body":").  Start the\n    evaluator and define the\n    \n    iterative ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"factorial"},{"body":"function\n    from section ","tag":"#text"},{"tag":"REF","body":"1.2.1","href":"/sicpjs/1.2.1"},{"body":":\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":false,"body":"function factorial(n) {\n    function iter(product, counter) {\n        return counter > n\n               ? product\n               : iter(counter * product,\n                      counter + 1);\n    }\n    return iter(1, 1);\n}"},{"body":"\n    Run the\n    function\n    with some small values of ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":".  Record the\n    maximum stack depth and the number of pushes required to compute\n    ","tag":"#text"},{"body":"$n!$","tag":"LATEX"},{"body":" for each of these values.\n    ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\tYou will find that the maximum depth required to evaluate\n\t","tag":"#text"},{"body":"$n!$","tag":"LATEX"},{"body":" is independent of\n\t","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":".  What is that depth?\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tDetermine from your data a formula in terms of\n\t","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" for the total number of push operations\n\tused in evaluating ","tag":"#text"},{"body":"$n!$","tag":"LATEX"},{"body":" for any\n\t","tag":"#text"},{"body":"$n \\geq 1$","tag":"LATEX"},{"body":". Note that the number of\n\toperations used is a linear function of ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":"\n\tand is thus determined by two constants.\n      ","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 5.28","id":"#ex-5.28","child":[{"body":"\n    Modify the definition of the evaluator by changing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"ev_return"},{"body":"\n      as described in section ","tag":"#text"},{"tag":"REF","body":"5.4.2","href":"/sicpjs/5.4.2"},{"body":"\n    so that the evaluator is no longer\n    \n    tail-recursive.  Rerun your experiments from\n    exercises ","tag":"#text"},{"tag":"REF","body":"5.27","href":"/sicpjs/5.4.4#ex-5.27"},{"body":"\n    and  to demonstrate that both versions of\n    the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"factorial"},{"body":"function\n    now require space that grows linearly with their input.\n  ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 5.29","id":"#ex-5.29","child":[{"body":"\n    Monitor the stack operations in the tree-recursive\n    \n    Fibonacci computation:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":9,"eval":false,"body":"function fib(n) {\n    return n < 2 ? n : fib(n - 1) + fib(n - 2);\n}"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\tGive a formula in terms of ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":" for the\n\tmaximum depth of the stack required to compute\n\t","tag":"#text"},{"body":"${\\textrm{Fib}}(n)$","tag":"LATEX"},{"body":" for\n\t","tag":"#text"},{"body":"$n \\geq 2$","tag":"LATEX"},{"body":".  Hint: In\n\tsection ","tag":"#text"},{"tag":"REF","body":"1.2.2","href":"/sicpjs/1.2.2"},{"body":" we argued that the space\n\tused by this process grows linearly with ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":".\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tGive a formula for the total number of pushes used to compute\n\t","tag":"#text"},{"body":"${\\textrm{Fib}}(n)$","tag":"LATEX"},{"body":" for\n\t","tag":"#text"},{"body":"$n \\geq 2$","tag":"LATEX"},{"body":".  You should find that the number\n\tof pushes (which correlates well with the time used) grows exponentially\n\twith ","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":".  Hint: Let\n\t","tag":"#text"},{"body":"$S(n)$","tag":"LATEX"},{"body":" be the number of pushes used in\n\tcomputing ","tag":"#text"},{"body":"${\\textrm{Fib}}(n)$","tag":"LATEX"},{"body":".  You should be\n\table to argue that there is a formula that expresses\n\t","tag":"#text"},{"body":"$S(n)$","tag":"LATEX"},{"body":" in terms of\n\t","tag":"#text"},{"body":"$S(n-1)$","tag":"LATEX"},{"body":", ","tag":"#text"},{"body":"$S(n-2)$","tag":"LATEX"},{"body":",\n\tand some fixed \"","tag":"#text"},{"body":"overhead","tag":"#text"},{"body":"\" constant\n\t","tag":"#text"},{"body":"$k$","tag":"LATEX"},{"body":" that is independent of\n\t","tag":"#text"},{"body":"$n$","tag":"LATEX"},{"body":".  Give the formula, and say what\n\t","tag":"#text"},{"body":"$k$","tag":"LATEX"},{"body":" is.  Then show that\n\t","tag":"#text"},{"body":"$S(n)$","tag":"LATEX"},{"body":" can be expressed as\n\t","tag":"#text"},{"body":"$a {\\textrm{Fib}}(n+1) + b$","tag":"LATEX"},{"body":" and give the\n\tvalues of ","tag":"#text"},{"body":"$a$","tag":"LATEX"},{"body":" and\n\t","tag":"#text"},{"body":"$b$","tag":"LATEX"},{"body":".\n      ","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 5.30","id":"#ex-5.30","child":[{"body":"\n    Our evaluator currently catches and signals only two kinds of\n    \n    errors—unknown\n    \n        component\n      \n    types and unknown\n    function\n    types.  Other errors will take us out of the evaluator\n    \n\tread-evaluate-print\n      \n    loop.\n    When we run the evaluator using the register-machine simulator, these\n    errors are caught by the underlying\n    JavaScript\n    system.  This is analogous\n    to the computer crashing when a user program makes an error.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/5.4.4#footnote-4"},{"body":"\n    It is a large project to\n    make a real error system work, but it is well worth the effort to understand\n    what is involved here.\n    ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\tErrors that occur in the evaluation process, such as an attempt to\n\taccess an unbound\n\tname,\n\tcould be caught by changing the lookup\n\toperation to make it return a distinguished condition code, which cannot\n\tbe a possible value of any user\n\tname.\n\tThe evaluator can test\n\tfor this condition code and then do what is necessary to go to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"signal_error"},{"body":".\n\t  \n\tFind all of the places in the evaluator where such a\n\tchange is necessary and fix them.  This is lots of work.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tMuch worse is the problem of handling errors that are signaled by\n\tapplying primitive\n\tfunctions\n\tsuch as an attempt to divide by zero or an attempt to extract the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n\t    of a string.\n\t  \n\tIn a professionally written high-quality system, each\n\tprimitive application is checked for safety as part of the primitive.\n\tFor example, every call to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n\tcould first check that the argument is a pair.  If the argument is not\n\ta pair, the application would return a distinguished condition code to\n\tthe evaluator, which would then report the failure.  We could arrange\n\tfor this in our register-machine simulator by making each primitive\n\tfunction\n\tcheck for applicability and returning an appropriate distinguished\n\tcondition code on failure. Then the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"primitive_apply"},{"body":"\n\tcode in the evaluator can check for the condition code and go to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"signal_error"},{"body":"\n\tif necessary.  Build this structure and make it work.\n\tThis is a major project.\n      ","tag":"#text"}]}]}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/5.4.4#footnote-link-1","child":[{"body":"We assume\n    here that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"user_read"},{"body":",\n\t      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":",\n      \n    and the various printing\n    operations are available as primitive machine operations, which is useful\n    for our simulation, but completely unrealistic in practice.  These are\n    actually extremely complex operations.  In practice,\n    reading and printing\n    would be\n    implemented using low-level input-output operations such as transferring\n    single characters to and from a device.\n    ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/5.4.4#footnote-link-2","child":[{"body":"There are\n    other errors that we would like the interpreter to handle, but these are not\n    so simple.  See exercise ","tag":"#text"},{"tag":"REF","body":"5.30","href":"/sicpjs/5.4.4#ex-5.30"},{"body":".","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/5.4.4#footnote-link-3","child":[{"body":"We\n    could perform the stack initialization only after errors, but doing it in\n    the driver loop will be convenient for monitoring the evaluator's\n    performance, as described below.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/5.4.4#footnote-link-4","child":[{"body":"\n        This manifests itself as, for example, a \"","tag":"#text"},{"body":"kernel panic","tag":"#text"},{"body":"\" or a \"","tag":"#text"},{"body":"blue\n        screen of death","tag":"#text"},{"body":"\" or even a reboot. Automatic rebooting is an approach\n        typically used on phones and tablets. Most modern operating systems do a\n        decent job of preventing user programs from causing an entire machine to\n        crash.\n      ","tag":"#text"}]}]