[{"id":"/sicpjs/4.4.4","tag":"TITLE","body":"4.4.4  \n    Implementing the Query System"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    Section ","tag":"#text"},{"tag":"REF","body":"4.4.2","href":"/sicpjs/4.4.2"},{"body":" described how the query\n    system works. Now we fill in the details by presenting a complete\n    implementation of the system.\n  ","tag":"#text"}]},{"id":"#sec4.4.4.1","tag":"TITLE","body":"4.4.4.1   The Driver Loop "},{"tag":"TEXT","id":"#p2","child":[{"body":"\n      The\n      \n      driver loop for the query system repeatedly reads input expressions.\n      If the expression is a rule or assertion to be added to\n      the data base, then the information is added.  Otherwise the\n      expression is assumed to be a query.  The driver passes this query to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_query"},{"body":"\n      together with an initial frame stream consisting of a single empty frame.\n      The result of the evaluation is a stream of frames generated by satisfying\n      the query with variable values found in the data base.  These frames are\n      used to form a new stream consisting of copies of the original query in\n      which the variables are instantiated with values supplied by the stream of\n      frames, and this final stream is\n      displayed:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":1007,"program":"chap=4&prgrm=","body":"const input_prompt = \"Query input:\";\nconst output_prompt = \"Query results:\";\n\nfunction query_driver_loop() {\n    const input = user_read(input_prompt) + \";\";\n    if (is_null(input)) {\n        display(\"evaluator terminated\");\n    } else {\n\tconst expression = parse(input);\n        const query = convert_to_query_syntax(expression);\n        if (is_assertion(query)) {\n            add_rule_or_assertion(assertion_body(query));\n            display(\"Assertion added to data base.\");\n        } else {\n            display(output_prompt);\n            display_stream(\n              stream_map(\n                 frame =>\n                   unparse(instantiate_expression(expression, frame)),\n                 evaluate_query(query, singleton_stream(null))));\n        }\n        return query_driver_loop();\n    }\n} "},{"body":"\n\t  Here, as in the other evaluators in this chapter, we use\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" to\n\t  transform a component of the query language given as a string\n\t  into a JavaScript syntax representation. (We append a\n\t  semicolon to the input expression string because\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" expects a statement.)\n\t  Then we further transform the syntax representation \n\t  to a conceptual level appropriate\n\t  for the query system using\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"convert_to_query_syntax"},{"body":",\n\t  which is declared in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.7","href":"/sicpjs/4.4.4#subsubsection_7"},{"body":"\n\t  along with the predicate\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_assertion"},{"body":"\n\t  and the selector\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assertion_body"},{"body":". \n\t  The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_rule_or_assertion"},{"body":"\n\t  is declared in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.5","href":"/sicpjs/4.4.4#subsubsection_5"},{"body":".\n\t  The frames resulting from query evaluation are used to instantiate\n\t  the syntax representation, and the result is unparsed into a string for\n\t  display. The functions\n          ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"instantiate_expression"},{"body":" and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":" are declared in \n\t  section ","tag":"#text"},{"tag":"REF","body":"4.4.4.7","href":"/sicpjs/4.4.4#subsubsection_7"},{"body":".\n\t","tag":"#text"}]},{"id":"#sec4.4.4.2","tag":"TITLE","body":"4.4.4.2   The Evaluator"},{"tag":"TEXT","id":"#p3","child":[{"body":"\n      The\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_query"},{"body":"function,\n      called by the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"query_driver_loop"},{"body":",\n\t\n      is the basic evaluator of the query system.  It takes as inputs a query\n      and a stream of frames, and it returns a stream of extended frames.\n      It identifies\n      syntactic\n      forms by a \n      \n      data-directed dispatch using ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get"},{"body":" and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"put"},{"body":", just as we did in implementing generic\n      operations in chapter 2.  Any query that is not identified as a\n      syntactic\n      form is assumed to be a simple query, to be processed by\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"simple_query"},{"body":".\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":472,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGyPkCcgFAYDQSBEBgKjYchfHbNl6sa2oGEMUlCxidz3VSdJMiMPE-QDeisLa4QOuJJ4pOaGChjmIbrDA8CDHCAEAD5qUocrKuq4hataprBjK-pKu3QxhpW1abv9I72s6-lzlomzqi0UgOHIbNiDq8bjqG7h7smx7uvPBI3VFAb72GqTSiBqaZtDOaF2GE6rs0honkBLa3rIT7vt+hr-vhzqnmu26KZiLHNu23aCMutDfOKpNabOhgZAaygbmxZFuDCUHeo5qgtEYU6KqMHa2e5-ReepJ6sBe8whcoEWOsl8WxbYgXOIh-qMnvdW2Nh0Aodm906He-GfqB-QMcKVGJd25a7diamtuV1XNcdtmLsNxmzmZuiwp+lhqgYugxH0XNSGoUCcxI9iep1lx5uj2O-mI1dSIDxWXFDkRqjEBg04dfR8-DsRE7BriHfLwunWey46LriPi5Isuw-r7XwZcbcW8rpnc9AfuGGqdmKAUYgo-IGO47kCqC1w3rK08EuM9AefJ4bhWm5s4gAA8RcGNfh3jrPuE3xe3OT8coNY24Q87iPp9n9eEL5C+J+zvyh4Po-R5kAwSkoIDpghPlweiVByCfwXlXM8-dGQjzHpfF+6dT6X3Qr1N8FQ1RSn7iNaYpQ-4HWPjPNBEDhBQJgVvM2TF3qMBuMxVQHcC6t3fiwiuy1IHMGod-QOr1UjMDEBISa04wS5AUIQegoCdh9HuJXbuXFRTzQkVImoFtwgADJNGzBGKo6RGjZJAkoHIoRTMd4lXMJDBe+h9HqMoFXLBgjyDCPamI2xig1EyP4nQBeRUf673MHQsgDCqAsWCUkQGVCN5f0cTfS+Rj+IyAjLUFS-pSjgmSXsVJZs2gdCyBEugUTmAELEjEhesQzainAfoQppSihEMPiQgBQCjQgItrU4WITinQPKTQpGfUGDzTqaAbRgz5qUJKcbQpDBGEsW3HU8mlMYjbkmeQZ2yyGgzLmcwh2iyXabPtotNZGzDk3QwfUrSSSUnCHBOYoehhC4cEoIlL2+84k91vpOfe3A3Ym31tvCxLM1AmC8FVRg5pUzOH0JCpSzhuDtDILiJiCL8ykFxBg0GZ4dkMECDSNgmVtlhOYYi9FQyqDcFhaibgBzDmkoxbElyvUcV4oyLFOSWSOC3ONqbAZjyI7PNeYbe+TDcXEHxQ4+5gSXAxTVrtHEbJuhdVwmeQwjIYoKozL4UkTKb7YI-O2cIpQoagGaIYKVljkwVH3gwIk+AZCdJViE541c3R7K6UkBErkgV0RkJINQVU3BQqNI6+hvCPlcVlWHA+7UqXOEMKG51g9pXiF7NG-esag1wpDSMpeN9ZVe3TbazM9rE2eoMnG+gtlNb+P4UrMOgbFKogTYU8Nii3Sa3ZpzaWLtJm8B4ltEFygwVCEbcGug+g+36XHE6yJfSP4uz9aKyt7wy1FPnfLLAzy4gZB+rkBw71GQAAYTg+psjUUyuLd1VUIIQEE3JgrUEGI469+6LbaCBKQV9+AD3aAANSgDxLqz5X6OCtN-aQZNlruIPzSMQS9NTwEBGvdVe9CVGBPojW6YOaQbGGF8AoFg+BBz2tw5PVBDZQAAfBAwcEVHaWFDKoXIUvhsgodvWhx9vpAVD0CL4yebdX4cFSNUNjHA4FGgEKBn6qHqAPtyk+xkF6r1gdk-JxKT7IrkiHpLH6plOheH0AfQgVdChOME+Qoz+8TOgBdqUHDymanGeQ6pjjcn0Oj19C7ZoyiFzGcuYQr5+hdMMH02wQzDt-OnMpiFsLhntxRYCw0bS1mXJUV6rFgzYm+FnvMBUGqoQGD0Cs4QPFjz6DESExAzFuEdOBD01lq+TZhSvlSE538mkXx5M6BR9ejpQbdgy1+4gLkYxHhwgc+BiCn5F2QV-Iz4bRuhnM22QYLAktjlKMk7CDHpKZfCxwwubcs5l0bKGKicZxsDY4p83zd8Cy7dKPtiLi1+sAB83vsnq6FrLCXJi7eaNt4wS2YhUXSzfZ7JWyvOB4ym4htUhRDPwG4agfxeun3fm2lVknh4zem6w2bjAUFIY3S5F8ABCQZq3DsRw6ysXqDgWOzOJTTou7D8E0rOYUTHpPbOXawnqF81SyGl3fr+G6eBIRS5DPAvHQIkFE-mzzjBIPXUuEp-q3Ba2ZsbZmIzmQuIdno64Lt-0I92c66WYcjB3mWhNJEMbzO+ZFvkkwthd0LX8skNSMVnnJOLmRFAJL6X9Ob6ZJuXc13V3cJmZvvD0hVWnfVcZa7gOuWVR0CZ0bwgc5bw1evp8hJvEgTh+ydy0MGTOU5IGd1gpueNtba-lUtrIu0c5-CMbePLSpEo7b7n8NzeLOl0IF1CmwfISd-t5NRHPfHlt9vDnttQewBS4nwMu70FhqjJ0Rv2ppJjb68NyzhZ6MucLNJFb26h-mdMIWiMdvl+udHPvxf035zYkbeaKXrlke-J4FzmqnIIoBADAPAEgKgGgHiGgMSHWskKkCCO9D1nYqAlhnAfIiIgwO4sgRbAZAgVZGwLWkPHgRQIOOwtgQ4oHpUrHp8g7NuOQZukPDhsQT1mLu2miKCMlNQIgQQUnrDtBg5nhgRkRmwKgcCBweCPxsQOCHzEIcRnwSzPhoRsRkVoApIR4pIgYhQXmjQYtHQZ4poQwSmqKOaNQGIHQJPB0vQWwYMkIhgVgfofYhWijmYRYcpNvEPCYS4aAh1LIVkFYdoTXLoRGHfoMHoRofYmhO4Smp4eYd4e-AwMZtDsVv4QXoESMNuGEV4hooYdBqKBUMoA1DlMkQ4SgdYaKLYW4hweQQZMWEIIBPkYUehvCKAB9lJOUS4nYVUSUTgfxOAr9AUTPE0eEK0aGO0a4qIl0eEd4pktKv0Y0aiLWunmNAMUUaLL4eoVkVoakR2r4SoWRlPLQcEfQfLEPA0YMcFPEYkeKuVhOikdQWkaEcEZkQYTkSzDhrURbHMecdCpIUngkdZkkXQKIe4uCB8fUSYPMc4NISbAvH8VcSjvQPIXRKKA1IRpQv8aVtcdCncbEOZhURMTONUfxKiSwOifCTcYQSmiSeifOF-O9D4UobqBsQYdYdLIocIXsb8boo8baMcVEdBtSeQAwERsIKxjiUnDoekU8Ucd0Q4q8UHLBoKRiYCZ0nSWQIYNwCKb4MCeIUqeSVCdwLSQvO9BqcPPgKKUiQIuzLMWcascyREZEAAJCFDbFoH4mYGTGbEGS5xfGrGUnQY+m2keZqHilq5iEfBioOpEnDRQYsyBkQnfGJRGmTwmn2mlEBFuhiKRlpk9E6o5wprxkrEeZak5lbH3GZmgjZlEk6D8lxk2kQlMD4CtLvDMCfENGlmiHvGSZ1G+noa2zgSFmQmJQhmynRbdhMEVSklCn6nFa7aDmJmMDJmSDqkdmP7+jzmrHCnmlimjnylWnuRqxUDECuEdndR4kdGVGEmykGQHkfBHmuH+kswHkzm3Gjlnk3yHG8m7kWosyihvAMSohIFvkZlukXkEniLXn8T-lcHOA-AvnNEjHPjOLjEelXlTE9Ggn0AAWwWDh3laAPm1l0TQWAWDiYkMQPpTzim9RZmBBRmQUxn5nQbEU4XNnGCIqWHAXLDUWVm0WlncB5mNxMVYUwX0A-CdD0LWTfSnl-jcURm8XVmWlWKpBsX5iOBTwfAKBlkSlKLIWdEzgaWUAGQqUHTKBSGEWlR5ImU-R4XHmgIJoGUuoxBcUflBHIRcxymxm+pQQRk2UnkGX8wyUuUjD+XmXmB4qAS+V2USyaUBXOWfK+wxWhVoHHmaC4jGVqXRWUCxW4l6p6yDQhWeVWkNQ+XMD4WgKZXZXaW6xpD6zBbBEhWKVoHsAeCGahnnkoX2HoWGX8TNXDqPnNxchgolltVBU8l+HfmMVvGwa9WGaRWGIgXhlgjggzXQlzWSpp5DyijxQvKkCtKEbVB9n+HOlUE5W3ati+JkrbXBB7X5yHVvmIUGiii3WXXZRUDXUSK3WogdmFVKVigXW4hXW7UfUHVfVHUunlmgUdWemaEGQOAzwA2vU7U3Ug1QlJWDLPUI1WRI3A2+Kg3AXHVOUQ02FgWoUQVdUGQY1FaI3vWKCfWo0-UWTU27XsnEbSWumLVVn0Vo1VCkARnxQO4jWfI0WVB8WgACVLHGD-lU1WQC2cVE3C10Xk26CNUwZ3BqZ9k+kvmUqkBiD9reEvmVVVXsEzjgjq0LFrkNCa0AlYkVaCA6162fEG0q2A3I2425QvI3p3ruZ41dUSYtlZRY3BCMgu0s3jW+3AY6V-Xw3S1BQ037Vu3FG+3Gw4Zm3QoCHkaA1jlP7uI8182vWy2+3-YDIp1ubqYTrp1TyZ0W0Uw53eWAT82DD0HV2HKS1YUx1CCN27kq3GGl13W+3vlnXoGXlk1en8Sp30D9U2RW2YkImvn92BWSljUdlo0zxFwG1s2nUPF1W2jPERF7m-XSYwpZqoiiFjF6Vggro3m7qT3mBvAFG8A3HZYuq9Sfn7C7rHDeq8bXolnSan15VZAZHBG-1F3pKLUQidD6a+CCLDbwhmyv3b1v3ib70uCoa4hCmH3SaopIrkqzrrr0rjywJYo44FH9CMDSaMh8YLxD5-AiYTq-0uRnjX6soEqMjX5G74Otpv6rR32riP0kOjq-3N1nL4Mq7s1MPipsqJLf7V6gO8r+jaQIRHkMD0rZZbmim2KfRkPv1CP-hPKSBCryriMSrIMbz+qqAqbiprpY7s1RrvgZqTTSYtoepAkM2pqATprtSONrqiEFrCpFp2oOqLL8TSbVqGyLEeEca4heOtobrWGdrKzSzkM0yoNVQWPZaGnOPho6OhhLoBrROZMboq2PKSJgYqMcMFOXxypnSiHxPdoaD9mbhF5bS0qdr7SHR-RShv5qiTQroJrlO4NZNv5-IpNeP9NhqFM6OVOawq2UC+AkAlZ-3kr3bWYN7ckLO5KkC6Qlaw10DGRmQuAvnshzNmWuNvAixZULNlGpDzT+bGwJYrMbNbPOb8RGQmTmR24z03EqD0DnOGDhNw6KNaDKNoqsb0q8JVMVR+1UitDIjqqSDBbHP6D0pcLgjECAs-T0pFRE2a5ehIvIirPFN3oYsgtIsgvgvTNmwwsOAeLvoWx9MgtcJTN+zmK0nGDAvYPfSkBEbGD6AADkVK+gT+oAAAOlgIfW05NB7TIMEAoPoFDNwD0NqXKOBLywZJy9yyc1gKy8Sxy2QBq3ywK0K6K+K7es0lKzK50nfLwMuFwj0PNNa6AAAF7rgxCitFASuNnswWvZgKvcDOvKs3Squ9F6vI6asKx13gqGCmRkAGumu1TmukCys-KgA9AgnkDQnLUZvKAZu3KTC8tOh4DavstkrquhuxsFaevSuJv6DJupviHpsU1Zs5vwjWBBvgjORAA","body":"function evaluate_query(query, frame_stream) {\n    const qfun = get(type(query), \"evaluate_query\");\n    return is_undefined(qfun)\n           ? simple_query(query, frame_stream)\n           : qfun(contents(query), frame_stream);\n} "},{"body":"The functions ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"type"},{"body":"\n      and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"contents"},{"body":", defined in\n      section ","tag":"#text"},{"tag":"REF","body":"4.4.4.7","href":"/sicpjs/4.4.4#subsubsection_7"},{"body":", implement \n      \n\t  the abstract syntax of the syntactic forms.\n\t","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h3","child":[{"body":"Simple queries","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n      The\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"simple_query"},{"body":"function\n      handles simple queries.  It takes as arguments a simple query (a pattern)\n      together with a stream of frames, and it returns the stream formed by\n      extending each frame by all data-base matches of the query.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":452,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwMwK4B2AxgC4CWA9oaAM6kBOApgIYC2A+iwA7dOEATDgKYAbFgE8mAgBS0AjABpQI8VKG0ATAEpQAbyygjoZqXwMa5Wh0L5RoufO2Hjr4wH4VYydI5aZzm5BAFyg3CzkDDIAFqyyCtqKLkEpxgGgALwAfHSMrJw8fILC3upyeewcpBEOCUmpDY1Nqao+GjraANxYAL54RGRUloSkTAyirABuTCVq0o7Krep+OvrJJkxmFqBWNna1Tuspnku+-oGNoeGRMXGOiUfNoOnZOyNjEyzTs20yp+0BepPYEgl45ejMSrVcgHbRw7p9fokCjUXKQzi4cSkNg8GQEQjKWi6AyuUzmGiYlikUaEPwVNjldEcHHcPFEQnw3pIwaoynU-h09GM-LE9Zk7a7Wz2YXsC4NTxS0SPNyhcjvcZTGb-GTKxqxFjxekPEFGMGgPk0wX5GWcaG1I2cxEgUCUPgMKlDKosABGE2U3HwpFALEEoAA5pssM7cAxKGxQMRojxRgxQABmZ60Jg8mhptB5tPObkomgsWi0SjEGQAayYEmUzGIlAYAiJa1Jm3JO2sipkjebrblqU8RBEuDV0l1xlCTAAjvgWA5a-XQPrZGu+9mB0S4VOjJ4N-2W0S96BQmWK1Xl8o7Zum8fHTh8TnQDja17fUx0iTjE3CPRQFEStFw-CZMkAqxSBkAAiAAqapP1g6CunWZ8S0AyhKGrfBWWXDglFAPDVh-II-wA2h8G9BCwIyYNy0rGs63wm8ahkIDiBA6imE5VJyFwZ5dlHJhx0IeYKKon0JjhdsmnFGghJE6RulSHpQDELMZMaMigyPARwIvBiiJYmE5EorieNkzsJWsBSJ1kXShxBEdBGEuzT1SUJbwc5SUj6Vw-OMNChjeLMGCgvCCKM0BJkXfBuM0txtLoMzJKYfT6KvJiCNvdjONSiygj4gSbJcxT4hSz9pJIhos1IL0TNy0RQKYIETWMa4olESDGIkZiwgiKIopi0Q4rhVq2qCHLgKa8yCrcVT1LS6rUiS3T0svHqOE0YzagqqSUOaIqZEE0q7LvAcqvc1xavq3aJM-caJvagaZA6zbtui2LuJ20z7v2g6mgW0QNOWpobq8rcW2UYbRp8xoAqCBHQCRoLUQEKxwlIRMZDYUVUjk19MgyWjoKArCcOgq79ww8nuCps9CeJkm1VC0hKackKxlIemZwYWMojYZRoKIatCEoAB3GhXTGD1UQAWjl0AuOQuHkbFKyaHR2hMcTBEcCS6X3RLZrwLfGYuICbokojINaMN2XaQt0nMOw7gVawJKA1tl03Qd5qYJZrn3eLYKzY4b01XRwgwxkGKGHIVLoa+vHjAJt644Th7PpG7i9dRmgI8ENUww4DPUpkQuo7DFOjAJjdK+LlC+nz0AG+j0uvoryPG4Sgnbzb6u84GdCB44NUOBjdgvzLrPJ7YeLqoJgyqxnv1zXdeem5D1EmAADxpWRV5a7O4uUOeF-VrYaDesOB9jlh48Tk-vvXqet+3mg94PsfcA4MjIP4FBI+iwqQsDPhvC+rgkoD3AqPce5976P1nhAgGtcNbdg4LZUSsgB6OSCJ4L+-BD4P0zmvAQoDwFv1PFcKkKZaQ4ixtELuRd24wy-LgkB1RKGbz1h-DB1QwwRiEF1egMgmxsG4NQQBN5Yhemrr3dBuw3riMkaJEYugABkGjVx3BUVI9RRNaKkFkQI3hLdJRTzEXGVRgCa4bCvvwlggjfAiKgnotRpAhaECnu7RELdMZ0OZFSbGASxgEhUBQ1+m8FEOPPoY0A0FcA1GkOzRonhEnJIEKkhoM55yLlerQsJnCWB4LcJ4OJRhqEYKPgU-kFhSmuAIfvIhP8-7UFoAAkYtS6HFO4dxKpSiXqhPqaALRGC3rkOqA0jw-U6n0OCUw28wzCDGieikW8kySmPTWUYZZQTGG3ANN0sJqydkTQ3Js05ZyTTn13E0UIGSYQpLMcPYKHTo4TFINQK07AZC7zsWnF6u9lBmkVO-FuiZszVi4LSC8XMhgyDhWFIYyh5xjF6pjVFcUGC9VuQlJKDDEwcGYBRUQ3s9mEqYWinFHBMV0VZii0A9NrmgGpbilBqsCaUuJUwUlttiYJKSU8rJp4FT7Cqe8sMnzvkQmtNykldhSDgteaiG2PyGTLkinWYi6wkq0HAjbHqWqJA6E5YokqY4zptjFfYBmtAXnImCpHPeHA8KUFwMckZeh7Fdg3Msroas+G4E2ESpFJZaCevCXixe6C1XOt3r4MNQwI3+qHo61Vmwx4uQTUIJN7TI0AtjZm2Vvz42uqYu6gtQs82EDliWtgvinwqopJHLg5Z4X5uWX0wtDj60TyxCyHUIJJn4HjK8SFxBoUhjbQy6gfwqSjv9IUiw3btkNGDYwmdHb-yRu7e-T5Jg7AzCbEQFM4EAAM3Q+GiXFsSo9XBeBdQ4sbcgsgAX3pPeqcCDAP2UFPWMUAABqUA8gzUOJ-RMNp-6GBppfGHG9HckETEQaQ4+EGZiFCfX7V9PauzwcsbQCQbBvSUCau6mwlij66GA9BDg0EgPMrcBCYufEJB9nvZh8gz7PQ4eVemmgzBvHz0Q6h6wap2NSXxe0nSHHH1cew3pWiCH0MPu4Fhl9b7VYtzyDMcWi5qwyD3twOxHYHG7BqUZ3Q9NPDwaYLeizu9uANlk2p+TGnpkhHGS9Sz1n+o3B0xwPTogDMbks1ciaAWgsGdvGFjzKo1KOdVkjPuzBdP6Yk7nLkfCRBFFbBwOdRmSUdOoEnJDx9o2oWbUrVLgX0uQJSEdczJDy7cRMw1-ihm8kOGAWpS6JoUtxVVipNSwMlrMugbA7u7d4EQMM92oblkzMWtctgiucXmjlMXFmRjnnIvpdHmwtbqCGhI38iNkG7kCaDJuPFHboBPB7eC4c2QrXQAAB83vVaYGlp7MW7kTVCEk0bC2jBI2S+gx7BnCu8uKysh1L5CHFD4rSyg5ZyCfhQ0-Nh3apP-iDDA2icDaQIJ67c1WR0ACEGCsHzFwW1tBDiiCsf2djA7ncOFMpZa4bHUTc6c+MEDDSjXrA1LYVVNqzpYJS91NAqbYZJssJLjNyjX15u6gJlTk6lrVu4N80z3AvVKWY4endxobOc7MKruFlltyeYJYPsbtePOyfrEF2lI6OWiHWDnTz0nKDiSgEl9L-G6DHkTCyUl87Y2Q8OMR8QsrScc5q-8lllu+vDcLNegRbgH0Kuma7HEpmgrMnZOHMX4VpeUi5IXA4bg2edCit5wMkXzWMd16s00Jp39keSLR23+v3bm8ifLjn3QT0g+wUb3H1pveOlt4+nXnHgewBS8n-crzNx2+jO0ddqIo-G-p5Z4s1i7e10RZPzoM-bVD9G79U4K-XPjB+sv6btqty4sPKFeH6CvDozNv1TGHGBADAPAEgKgGgPIGgJoE2vxhgl1CmPku4rYjEl2LsAIkIhwK4lYhIvop4gkvATLKII2i3AQe6E1IdkgQYt6sYJfL6ncLeJQUqnxnBiwO+KQfkmLigdsFgaTOQAgUQYnrDKnlVvhvPHIERiRqILhtwd1NBEJkwNBISBIaRswehIRsRqRvlr-PIdgTYlQbQdsBuAwdYrgY+HwrsBeOQGGIQPPF0owdIZYNYOgS4t1IwdWmjtYbYWzFvC3JYZ4YAn4MoQ4PYVwTQEYaxOESZPYXCD4VVn4TYQEWwhwNDmjnOiETGg4pEQ4MYTgR4jEfDuhLsCIMQOIEbAiukQYY4XIhgVgW4QktpCGHVMUaUQ7MhO9m9qeGgU4jUa4SYR4kLEfCUCUQ-K0boB9p0U4d0S4aInUYks2kMS0SWI2tltmIsZ6OoZIboaYaEXQEEVoRRmIVkVsXkY+C3M0SMcbEkSkbDsccgRkXQUcreDkXoUwaoaHKwcetJo0QsRcQivIYITMNcUMA4RBKItBA0SMD8WUdQIoaAP8c-MkY5kVsCQUU6tYOIMRuQoidwMiWkX0XcZUY4s4sIr0bkdIvgewN6FiUCTCbEbARiVSSwLSiMfPCmIERocDLcfofntsIOhsZoeRvCUcdEXSS+AyViSRgIGxhUTyWEfQaxM8aYWYS3GHOKUyTSYQAUhAimLQMoJKRICCTwWqdibiYQLCeENqWMLqa3JQFKW8aiLsPnFCQ7FyUqvoAAJCuCEldHEmYGkkvFCxOnnHQlmminoRBmrG-HfI6EympzoKuI8oep1FOCwbhnzHBl+wWlTw6mumGmQSJmunKCmpcgtwRnDEhnhy2nSn4nclxkOIJnMBJk1l4GFipnBRlkzSUBtJ47fHNG5k7FhwQlNGRkhlDrAgdlRm0gxnNnW4NCqmUnUlIkw4Ip3YTkVlZmslWm5kP7rrpkjl+z6m5nKlVa7ByR0hUhMBeH9kkRXaTG+m1HNlCxnn0AXleHEFVZnkanXnJB1zylREzn2lVF-jowliIEzk7E+k9EzGPn1HUAgVDAgQaltHjFNCQXTFuIwXglwV8EIVNQvmjBvlhnBTAU4XUAgQ4nSBuZfixk+oyH0AFnJlEWogkWgVNRkRzhxR2HgU3nxn5mNmFmgDFnNxVYsW4VcBkphIejTDfl1ldgNnCQCWtnCGwG7BZhookBfj0BsBuk8VLbVHoXlDaVCxqWcXEAKFMU0AmX8BmXnkEWAIRpaU6U0GyWGF-n2jaWnFVbjgMD0X4WXmAKGWkBti6UPGGjaVEhtmogkp1R+VeEOXYhBU1x9ysSOURUlknnWCXncCkC9RWUaWBXBU-nmp7DSipUWVwFlgxXVB2VdJlWaS3klXZEpUJU7iokOnWC+iVgGY0W0VVHOEknQVkkjBCydWTrvmwGjXQqHk9W-mPGsTRGRU0C3zsQGaxUEmymglQTQSTWwlrXqJtVVH2xfIMBtLEZqgunpGenOUuVVFEAPy9RHXNinWFwXXgUoWNC7AvU0qPUnXiIvUli5mLXU7eLfW+zHXPXnUA2XVekbVoUDUYVDV4HCwg0PVg1PV-WQ1DDjUvifXnWg0yzg0Y3eJQ3cVXWVKw13lQUI0BkJJfWo0E3o1xj-VY3lU-XsmbEzW8X0X8WMVA3eX0X2yCAyU3WbUMUwVCV8JZjAX5a+xC2c31l8UKV1FKV+IiEfGqbqYIpOkanKAPxhijoBEamFUbU8GcbcYwk7luDa1LmpHhJ60G2QlG2AU+wM2-VM2Y3fJfIa1ublHcW6rSYu1GzNjgRs38nBEzlgaoElT3Uy2u0Q3E2+2I1xY2bq1m0umiFfg-WznXJYH811SC2yAilVJhxp0A0Z0yBZ2W0TS52RAC2y2F0zlV1nJS1wWx3uhy0AXO0WFybm2ak0UNX9V+mDU03QSl0s183zFfn93oLCkAVA160mnLn5rT2ZFuUyCKknFd3WDoaIrtrIrUAglw1D1QQ1pPlHrY3oR-glH4A3HoYB6zWyBeRHrwiBotwqaHl30QU9j7Dr0KmsR33-byibUwSLh6YSBOE-rmVVJHFP3-QHXBiPq9RMk73oZYrorMlzJoM0p56-gB0lGsC0jobfr8BTzD6fhiaal32qxJSH4KpkrgQ36Z5soYM9Kv4mhX0jQ3H4PTp31N3XLMMu4bW0O8qKrxJh4pKN6KhVJMAwwXkcBsoZaVlSliKfCEPP18NPCSrSq0j1oyDCN8rHmwEbpEroYprLpRooI7FxrZq+CmMFpA3WMiA5p3oTBmNzIglqq6Nlpuoer+pn0TB1r0jLG+GIMuO8q7q84gl9p8iDpEOvCYZINhMZZLqYORMaONDGPRBhNuM9KRPO0dISKQYKPMNdq87qpRP0j9pUiDr0yF45CMZ9qFAtLaiv4iS5p73hoyAlPmOrqv5mgJPZNdPYoYo9N5N8PnzlO8IWlZjyPDOlxjAkZZgyAADkYaMgj+oAAAOlgDvU08UF7bgM2AyIqMoCuAadJCCMswMQs6juZd0NMzMMw9MAwIs1+Ksx0+s4-ts7s7wC0gc0cwUjcPgNDIkKACuG9MC6AAAF5jRGDbNuB7NCD-MMAMiTCnPKAwsXNtRXMJLPOvPBx50wq0DixjArOItVBdmHMot-LovAOj2wnbUMvEAMtZJwjLMoTOgPOzPoN4u3Nku-P7OUsAvApgvKCm0MvehMssvITaA4vQQqxAA","body":"function simple_query(query_pattern, frame_stream) {\n    return stream_flatmap(\n               frame => \n                 stream_append_delayed(\n                     find_assertions(query_pattern, frame),\n                     () => apply_rules(query_pattern, frame)),\n               frame_stream);\n} "}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n      For each frame in the input stream, we use\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"find_assertions"},{"body":"\n      (section ","tag":"#text"},{"tag":"REF","body":"4.4.4.3","href":"/sicpjs/4.4.4#subsubsection_3"},{"body":") to match the pattern\n      against all assertions in the data base, producing a stream of extended\n      frames, and we use\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_rules"},{"body":"\n      (section ","tag":"#text"},{"tag":"REF","body":"4.4.4.4","href":"/sicpjs/4.4.4#subsubsection_4"},{"body":") to apply\n      all possible rules, producing another stream of extended frames.\n      These two streams are combined (using\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_append_delayed"},{"body":",\n\t\n      section ","tag":"#text"},{"tag":"REF","body":"4.4.4.6","href":"/sicpjs/4.4.4#subsubsection_6"},{"body":") to make a stream of all\n      the ways that the given pattern can be satisfied consistent with the\n      original frame (see exercise ","tag":"#text"},{"tag":"REF","body":"4.68","href":"/sicpjs/4.4.4#ex-4.68"},{"body":").\n      The streams for the individual input frames are combined using\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_flatmap"},{"body":"\n      (section ","tag":"#text"},{"tag":"REF","body":"4.4.4.6","href":"/sicpjs/4.4.4#subsubsection_6"},{"body":") to form one large stream\n      of all the ways that any of the frames in the original input stream can be\n      extended to produce a match with the given pattern.\n    ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h4","child":[{"body":"Compound queries","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n\t  We handle\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"and"},{"body":"\n\t  queries as illustrated in\n\t  figure ","tag":"#text"},{"tag":"REF","body":"4.6","href":"/sicpjs/4.4.2#fig-4.6"},{"body":"\n\t  with the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"conjoin"},{"body":"function, which\n      takes as inputs the conjuncts and the frame stream and returns the stream\n      of extended frames.  First, ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"conjoin"},{"body":" processes\n      the stream of frames to find the stream of all possible frame extensions\n      that satisfy the first query in the conjunction.  Then, using this as the\n      new frame stream, it recursively applies\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"conjoin"},{"body":" to the rest of the queries.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"function conjoin(conjuncts, frame_stream) {\n    return is_empty_conjunction(conjuncts)\n           ? frame_stream\n           : conjoin(rest_conjuncts(conjuncts),\n                     evaluate_query(first_conjunct(conjuncts),\n                                    frame_stream));\n}"},{"body":"\n      The\n      statement","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":79,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGzRWIBRNFxN4ACtLlRfRiAAD0IMJInPBI3VFdJMga5qwiOVysFomyqlID4GBqurepa552q44ZBiamaBr84bzECcbJpRQxptaiI5rdbclv6wa1uSVJysqhhPNqkr6F22b3PdVJuqyY6EVOuqRqg8abqm962qehaHpW4qk3PX6Ulu0wdoB-anqOvqPtWr7zBqMQqFqBh2jIXwHsBzi3WB97QaG1GXGq8hc0MZRSGoTQGEIQIGO5LQGCWjbDGcfH4cJlxiaR0mzpUehqvwap9C2mHuDkcgFGIBgPkCOX2JiJ6yoqygqtF8nJZ17a-QDUBZflxXKGVhQpOaGrxboUZNv1mG9boaHKDCMDwMKYgEMx7H81IPHRodl2pqlt3rA9z2o5NhWlf6NinT8jKISEYRwQM72819nGA-TkWXdtp0sHnMaFZz3FszIFh8GMfQAHJzVTfQo-9AAdLBSAyYh9A0EgRCYfAGBkYIFH0V7uB6Xw0M9uuDMr0hq+MIqS+MP3cYYefF+7hu3CbluDXbzvHl74h+8oQfh9IUeYP0Xhlwj0Aehvu-QAAL3XGJ26KE+z4vkf9GzBPbg785Qt1nvxTeNdiBFSGj9QCQhDCmTIPXH+wgB5D3-o1IBwJQQpzzuCFg+DlD4LTpMOuTo8ArzLv7CuVcoEoMIH3NB58MFX30Fgx+3BpxgnBOQfBhCDLEIMqQ6w4DwTOSAA","body":"put(\"and\", \"evaluate_query\", conjoin); "},{"body":"\n      sets up\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_query"},{"body":"\n      to dispatch to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"conjoin"},{"body":" when an\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"and"},{"body":"\n      is encountered.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n\t  We handle\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"or"},{"body":" queries\n\t\n      similarly, as shown in\n      \n      figure ","tag":"#text"},{"tag":"REF","body":"4.7","href":"/sicpjs/4.4.2#fig-4.7"},{"body":".\n\t\n      The output streams for the various disjuncts of the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"or"},{"body":" are computed separately and merged using\n      the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"interleave_delayed"},{"body":"function\n      from section ","tag":"#text"},{"tag":"REF","body":"4.4.4.6","href":"/sicpjs/4.4.4#subsubsection_6"},{"body":".\n      (See exercises ","tag":"#text"},{"tag":"REF","body":"4.68","href":"/sicpjs/4.4.4#ex-4.68"},{"body":"\n      and ","tag":"#text"},{"tag":"REF","body":"4.69","href":"/sicpjs/4.4.4#ex-4.69"},{"body":".)\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":86,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGzRWIBRNFxN4ACtLlRfRiAAD0IMJInPBI3VFdJMga5qwiOVysFomyqlID4GBqurepa552q44ZBiamaBr84bzECcbJpRQxptaiI5rdbclv6wa1uSVJysqhhPNqkr6F22b3PdVJuqyY6EVOuqRqg8abqm962qehaHpW4qk3PX6Ulu0wdoB-anqOvqPtWr7zBqMQqFqBh2jIXwHsBzi3WB97QaG1GXGq8hc0MZRSGoTQGEIQIGO5LQGCWjbDGcfH4cJlxiaR0mzupShAnIBQGA0EgRGurDyF8ds2QqNh5axwxSULGInq6jJ7zxP0A3ouWFeEBh1aeKTmhgoY5iMfWwPAgxwgBAA+EWxYlqXiBl5XVcGD4PYIwx7c0x2w6NlWTbN0knXOYXqi0UgOCp4hZcjxXuF9qP1fYrW+eetJdbtg3plKLO1eJC3QythdgeD6wHfAp5ATdhOyGT7NU-LwZu+jp5G-DweYmb133f6CXt3r-kUbujyofwap9D+7buDkcXU4D8fc+1i6KsoXFl6TJeobqpZ-VKV7ROaNuk-6Tu079-RQ5iYgEMx7H81IPHRshwxobBQ+lAwirwoAoDeost4D39CPN2N0F50FGL-f+O1AHANAGvMBZsIHi2nlgDKEJgjggMq-PM78cZfyIfRee1QnR4PIGNVO5DcSd1ICwfAxh9AAHJzSpn0EPaYAAdLApAMjEH0F7GWlB8AMBkMEBQ+hXrcB6L4NCjtOEGRYWw4wRV5wMI-rjBgmj2FiO4W4Xh-CGhCJEY8CRpspEyLkfoa2vBlwN1AD0Zx3AABe64YhCKKLYpg0jZGkHkdmJR3jVHh3UfxIx2jaE-0AkIQwpkyBcMCfYkJ8jGoROBKCCE5BKHghYEU5QRThDwmsJwp0eBdHGH0V-QxZAtEmIycExxOT3HcGnGCcEhSDIlIMmUgyFTJgxPBM5IAA","body":"function disjoin(disjuncts, frame_stream) {\n   return is_empty_disjunction(disjuncts)\n          ? null\n          : interleave_delayed(\n               evaluate_query(first_disjunct(disjuncts), frame_stream),\n               () => disjoin(rest_disjuncts(disjuncts), frame_stream));\n}\nput(\"or\", \"evaluate_query\", disjoin); "}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n      The predicates and selectors for the\n      representation\n      of conjuncts and disjuncts\n      are given in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.7","href":"/sicpjs/4.4.4#subsubsection_7"},{"body":".\n    ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h5","child":[{"body":"Filters","tag":"#text"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n\t  The \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"not"},{"body":" syntactic form is\n\t\n      handled by the method outlined in\n      section ","tag":"#text"},{"tag":"REF","body":"4.4.2","href":"/sicpjs/4.4.2"},{"body":".  We attempt to extend\n      each frame in the input stream to satisfy the query being negated, and we\n      include a given frame in the output stream only if it cannot be extended.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":85,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGyPkCcgFAYDQSBEBgKjYchfHbNl6sa2oGEMUlCxidz3VSdJMiMPE-QDeisLa4QOuJJ4pOaGChjmIbrDA8CDHCAEAD5qUocrKuq4hataprBjK-pKu3QxhpW1abv9I72s6-lzlomzqi0UgOHIbNiDq8bjqG7h7smx7uvPBI3VFAb72GqTSiBqaZtDOaF2GE6rs0honkBLa3rIT7vt+hr-vhzqnmu26KZiLHNu23aCMutDfOKpNabOhgZAaygbmxZFuDCUHeo5qgtEYU6KqMHa2e5-ReepJ6sBe8whcoEWOsl8WxbYgXOIh-qMnvdW2Nh0Aodm906He-GfqB-QMcKVGJd25a7diamtuV1XNcdtmLsNxmzmZujDGqMQOEoRKvYAD3YnqdZcebI+4N2Tf1p0-MVlwajEKhiH0YhI8IQxuDkCqfs1mOwa4zX2c56WXZLhR-k2l2Ykh-W84QnOGHaMhfH0LOc8mnvSD7-PC+dynKeDuhQ8kCPDZlihG7QlvQFKafZ-D0WF4bvlV+aKHyf9Xe1adpmMohEzlIM4hO60bv8xH8FuAHrQnSwedSGMB-e4Yb7SBYPgYw+gADk5pUz6Eng0AAOlgUgGRc77VquHdmwQFD931twHovg0KrRAQZf+gDjBFU-t-YeuJCFANzmAtwECoFFFgfAx4SDJooJkGg-Q81eDLmWqAHoXDuAAC91wxFgUUFhTB8CoNIOg7MWChG4Nuvg-ilDiHvyqF-QCQhDCmTIKAiRbCOGJz4dwacYJwTkGfvxFgVjwTKFscIeE1gQFOjwKQn65C-5kCIdQgxUj2EyP0MYnoZiISWIMjYgy9iDKOMmMo8EzkgA","body":"function negate(exps, frame_stream) {\n    return stream_flatmap(\n               frame =>\n                 is_null(evaluate_query(negated_query(exps),\n                                        singleton_stream(frame)))\n                 ? singleton_stream(frame)\n                 : null,\n               frame_stream);\n}\nput(\"not\", \"evaluate_query\", negate); "}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n\t  The \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":"\n\t  syntactic form\n\t\n      is a filter similar to ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"not"},{"body":".\n      \n\t  Each frame in\n\t  the stream is used to instantiate the variables in the predicate, the\n\t  instantiated predicate is evaluated, and the frames for which the\n\t  predicate evaluates to false are filtered out of the input stream.\n\t  The instantiated predicate is evaluated using\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n\t  from section ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":" with\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"the_global_environment"},{"body":" and\n\t  thus can handle any JavaScript expression, as long as all\n\t  pattern variables are instantiated prior to evaluation.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":8,"eval":true,"prependLength":1067,"program":"chap=4&prgrm=","body":"function javascript_predicate(exps, frame_stream) {\n  return stream_flatmap(\n             frame =>\n               evaluate(instantiate_expression(\n                            javascript_predicate_expression(exps),\n                            frame),\n                        the_global_environment)\n               ? singleton_stream(frame)\n               : null,\n             frame_stream);\n}\nput(\"javascript_predicate\", \"evaluate_query\", javascript_predicate); "}]},{"tag":"TEXT","id":"#p11","child":[{"tag":"SNIPPET","latex":false,"id":9,"eval":false}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n      The\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"always_true"},{"body":" syntactic form\n\t\n      provides for a query that is always satisfied.  It ignores its contents\n      (normally empty) and simply passes through all the frames in the input\n      stream.\n      \n\t  The\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rule_body"},{"body":"\n\t  selector (section ","tag":"#text"},{"tag":"REF","body":"4.4.4.7","href":"/sicpjs/4.4.4#subsubsection_7"},{"body":")\n\t  uses ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"always_true"},{"body":"\n      to provide bodies for rules that were defined without bodies (that is,\n      rules whose bodies are always satisfied).\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":true,"prependLength":55,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGzOlM8hfFSShSHzV8xBMwJuDkcgFGIBgPkCFr2JidzQGa1r2uq-oFF8rAMohMqKqqmriHBAziAQqg2vaMhfDmwQ2HKyqmBmp0xvIUhjAYFbSFxbMyBYfBjH0AByc1U30cDuwAHSwGrHg0EgRCYfAGBkYIFH0dJMm4HpfDQp6boM87SEu4wivnQ7lvzU6GBhuHiFu+6lMep7-Ve97Mc+4hvsoX7-tIQGYP0Xhl2sUHuGp2nQAAL3XGJXqKYnSfJgH9GzBnWYhvHQCh-j0au2a9qqQ7AKEQxTLILHCC+4Qfr+vmAA9BenMFwXIdbwRYQ3lEN4R4WsG6nTwRGjpOs6Lsl5XVfVinAe10Ael1ibDeNgzTYM83JjF8FnKAA","body":"function always_true(ignore, frame_stream) {\n    return frame_stream;\n}\nput(\"always_true\", \"evaluate_query\", always_true); "},{"body":"\n      The selectors that define the syntax of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"not"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":"\n      are given in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.7","href":"/sicpjs/4.4.4#subsubsection_7"},{"body":".\n    ","tag":"#text"}]},{"id":"#sec4.4.4.3","tag":"TITLE","body":"4.4.4.3   Finding Assertions by Pattern Matching"},{"tag":"TEXT","id":"#p13","child":[{"body":"\n\t  The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"find_assertions"},{"body":",\n\t\n      called by\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"simple_query"},{"body":"\n      (section ","tag":"#text"},{"tag":"REF","body":"4.4.4.2","href":"/sicpjs/4.4.4#subsubsection_2"},{"body":"), takes as input a pattern\n      and a frame. It returns a stream of frames, each extending the given one\n      by a data-base match of the given pattern.  It uses\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fetch_assertions"},{"body":"\n      (section ","tag":"#text"},{"tag":"REF","body":"4.4.4.5","href":"/sicpjs/4.4.4#subsubsection_5"},{"body":") to get a stream of all the\n      assertions in the data base that should be checked for a match against the\n      pattern and the frame.  The reason for\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fetch_assertions"},{"body":"\n      here is that we can often apply simple tests that will eliminate many of\n      the entries in the data base from the pool of candidates for a successful\n      match. The system would still work if we eliminated\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fetch_assertions"},{"body":"\n      and simply checked a stream of all assertions in the data base, but\n      the computation would be less efficient because we would need to make\n      many more calls to the matcher.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":154,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwMwK4B2AxgC4CWA9oaAM6kBOApgIYC2A+iwA7dOEATDgKYAbFgE8mAgBS0AjABpQI8VKG0ATAEpQAbyygjoZqXwMa5Wh0L5RoufO2Hjr4wH4VYydI5aZzm5BAFyg3CzkDDIAFqyyCtqKLkEpxgGgALwAfHSMrJw8fILC3upyeewcpBEOCUmpDY1Nqao+GjraANxYAL54RGRUloSkTAyirABuTCVq0o7Krep+OvrJJkxmFqBWNna1Tuspnku+-oGNoeGRMXGOiUfNoOnZOyNjEyzTs20yp+0BepPYEgl45ejMSrVcgHbRw7p9fokCjUXKQzi4cSkNg8GQEQjKWi6AyuUzmGiYlikUaEPwVNjldEcHHcPFEQnw3pIwaoynU-h09GM-LE9Zk7a7Wz2YXsC4NTxS0SPNyhcjvcZTGb-GTKxqxFjxekPEFGMGgPk0wX5GWcaG1I2cxEgUCUPgMKlDKosABGE2U3HwpFALEEoAA5pssM7cAxKGxQMRojxRgxQABmZ60Jg8mhptB5tPObkomgsWi0SjEGQAayYEmUzGIlAYAiJa1Jm3JO2sipkjebrblqU8RBEuDV0l1xlCTAAjvgWA5a-XQPrZGu+9mB0S4VOjJ4N-2W0S96BQmWK1Xl8o7Zum8fHTh8TnQDja17fUx0iTjE3CPRQFEStFw-CZMkAqxSBkAAiAAqapP1g6CunWZ8S0AyhKGrfBWWXDglFAPDVh-II-wA2h8G9BCwIyYNy0rGs63wm8ahkIDiBA6imE5VJyFwZ5dlHJhx0IeYKKon0JjhdsmnFGghJE6RulSHpQDELMZMaMigyPARwIvBiiJYmE5EorieNkzsJWsBSJ1kXShxBEdBGEuzT1SUJbwc5SUj6Vw-OMNChjeLMGCgvCCKM0BJkXfBuM0txtLoMzJKYfT6KvJiCNvdjONSiygj4gSbJcxT4hSz9pJIhos1IL0TNy0RQKYIETWMa4olESDGIkZiwgiKIopi0Q4rhVq2qCHLgKa8yCrcVT1LS6rUiS3T0svHqOE0YzagqqSUOaIqZEE0q7LvAcqvc1xavq3aJM-caJvagaZA6zbtui2LuJ20z7v2g6mgW0QNOWpobq8rcW2UYbRp8xoAqCBHQCRoLUQEKxwlIRMZDYUVUjk19MgyWjoKArCcOgq79ww8nuCps9CeJkm1VC0hKackKxlIemZwYWMojYZRoKIatCEoAB3GhXTGD1UQAWjl0AuOQuHkbFKyaHR2hMcTBEcCS6X3RLZrwLfGYuICbokojINaMN2XaQt0nMOw7gVawJKA1tl03Qd5qYJZrn3eLYKzY4b01XRwgwxkGKGHIVLoa+vHjAJt644Th7PpG7i9dRmgI8ENUww4DPUpkQuo7DFOjAJjdK+LlC+nz0AG+j0uvoryPG4Sgnbzb6u84GdCB44NUOBjdgvzLrPJ7YeLqoJgyqxnv1zXdeem5D1EmAADxpWRV5a7O4uUOeF-VrYaDesOB9jlh48Tk-vvXqet+3mg94PsfcA4MjIP4FBI+iwqQsDPhvC+rgkoD3AqPce5976P1nhAgGtcNbdg4LZUSsgB6OSCJ4L+-BD4P0zmvAQoDwFv1PFcKkKZaQ4ixtELuRd24wy-LgkB1RKGbz1h-DB1QwwRiEF1egMgmxsG4NQQBN5Yhemrr3dBuw3riMkaJEYugABkGjVx3BUVI9RRNaKkFkQI3hLdJRTzEXGVRgCa4bCvvwlggjfAiKgnotRpAhaECnu7RELdMZ0OZFSbGASxgEhUBQ1+m8FEOPPoY0A0FcA1GkOzRonhEnJIEKkhoM55yLlerQsJnCWB4LcJ4OJRhqEYKPgU-kFhSmuAIfvIhP8-7UFoAAkYtS6HFO4dxKpSiXqhPqaALRGC3rkOqA0jw-U6n0OCUw28wzCDGieikW8kySmPTWUYZZQTGG3ANN0sJqydkTQ3Js05ZyTTn13E0UIGSYQpLMcPYKHTo4TFINQK07AZC7zsWnF6u9lBmkVO-FuiZszVi4LSC8XMhgyDhWFIYyh5xjF6pjVFcUGC9VuQlJKDDEwcGYBRUQ3s9mEqYWinFHBMV0VZii0A9NrmgGpbilBqsCaUuJUwUlttiYJKSU8rJp4FT7Cqe8sMnzvkQmtNykldhSDgteaiG2PyGTLkinWYi6wkq0HAjbHqWqJA6E5YokqY4zptjFfYBmtAXnImCpHPeHA8KUFwMckZeh7Fdg3Msroas+G4E2ESpFJZaCevCXixe6C1XOt3r4MNQwI3+qHo61Vmwx4uQTUIJN7TI0AtjZm2Vvz42uqYu6gtQs82EDliWtgvinwqopJHLg5Z4X5uWX0wtDj60TyxCyHUIJJn4HjK8SFxBoUhjbQy6gfwqSjv9IUiw3btkNGDYwmdHb-yRu7e-cIDAswcDZaXMY3pKBZhkAAcjDTIFlxgAA6WAGB2C-IUFpXyJ7NgZIqZQK4JBwl0CCK9QtpgMHPVmd2B6j0nrAxBr8N721hTvfe0AT6X0TERbwD9lAv0MAZG9fA0NEigBXIR5QAAvMaRgn1uHfcUT9uBv2xz-ZRwDT0QMJLgxepgwdxyHrqiGWg4sxjXvo0IRjzHgWkeUK4mCLBoJC29IphJxAVPQSyXCK9KFnTQZmLBs9PGxPYYY7hpj+G-msYgqI6CCmlPqbU0LTT2hOPQRVkAA","body":"function find_assertions(pattern, frame) {\n    return stream_flatmap(\n               datum => check_an_assertion(datum, pattern, frame),\n               fetch_assertions(pattern, frame));\n} "}]},{"tag":"TEXT","id":"#p14","child":[{"body":"\n\t  The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"check_an_assertion"},{"body":"\n      takes as arguments a data object\n      \n\t  (an assertion),\n\t\n      a pattern, and a frame and\n      returns either a one-element stream containing the extended frame or\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":"\n      if the match fails.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":106,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGywuIBgWGqBi6DEfRc1IahQJzEj2JidzxyguryAapqENIs4sFomzKpEaoxAYerGr+fQRuqsRWvPBI3WGQZZrGp1ziG8w1pqiaSJmqr1sLNrOLdbcdvm3zBsuOiLoYaoGDkcgFGILqer+bgnpehb2srTxJqar7+s2m6bOIAAPLQRDeqbh2a1cuFAIGftOlwYNY25youmHepaz6KG+q7rpK8wIah4R7pkBhKVBYg6DBAGPvoqhyHx56C1ws8LsZO6HqBnGmeRlz2rfCo1SlC6-QDFpIbpwZGbh4QWbZ76pOaJitCSBgbmY1QDtG3a+v1ubrG4JXmBV4HiqTd1UmYMQJAp6cwVyBRCHoOnKB2Pp7nm47Fq40V0dd92anp8IADII9mEYQ498PZKBSgfftomtuSVI6HZ-Q47DygUaWjPfcdhhnZzxRQ89gys5eoq-PT8dKE1xgdZYjWyDoM3laRgmObc1Ge-ZxP+JkCNahU-1SnBUe9nHtWWnaTp9HbpIu+YKXplKIHYnn0UFdele6A3sSZfJynqaNWn6eXqhm7X1nB9V0NmiDhdD8j6PX8683yGPopSkPtrKgLFtzvzAuBf024f6m00uBQBrc9YrRvk3DuMCIHoJWEg6B4CMG4Mfo6ee08x7CHBGnUG5hDBjQ4JQRKHxAjPX0ODAuXF0bg24E8QEAA+UA6RMgbWtnRNQJgvAMCEKItwqZnD6HNJI+g3B2hkFxExeR+ZSC4mRv7M8CCGCBBpGwTK8DgF6wUWohgyimSyM7qAWBeCGgmPUb3dC7VtG6IyLFOSM8OAkKkqUXhbB56UJqtQ2hlB6EKAxrrHRxA9H5yJvOUgxgGD2ImmQFg+BjD6AAOQyKUvoWxDQAA6WBSAZFehoEgIgmD4EesEcJfjuA9F8GhCBmSDLZlSek4gRV4mJOSe00gaSMnZIkbk-JRQiklMeOUuWVSamkHCejXgy5TagB6Is7gAAvdcMQilFGmZUmhczwnZgaZs5pGDWn8X6YMrpTpBpQQ+KI94pkyBZP2RTQ5MhamMNOcCUEEJyDggMiwIF-FlCgvBCQyYmSnR4B6eVPpHShnvNmV8+ZPzVncDLuCQFwKIXgoMlC6wlzwTOSAA","body":"function check_an_assertion(assertion, query_pat, query_frame) {\n    const match_result = pattern_match(query_pat, assertion, \n                                       query_frame);\n    return match_result === \"failed\"\n           ? null\n           : singleton_stream(match_result);\n} "},{"body":"\n      The basic pattern matcher returns either the\n      string ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"failed\""},{"body":"\n      or an extension of the given frame.  The basic idea of the matcher is to\n      check the pattern against the data, element by element, accumulating\n      bindings for the pattern variables.  If the pattern and the data\n      object are the same, the match succeeds and we return the frame of\n      bindings accumulated so far.  Otherwise, if the pattern is a variable\n      (checked by the function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_variable"},{"body":" declared in\n      section ","tag":"#text"},{"tag":"REF","body":"4.4.4.7","href":"/sicpjs/4.4.4#subsubsection_7"},{"body":")\n      we extend the current frame by binding the variable to the data, so\n      long as this is consistent with the bindings already in the frame.  If\n      the pattern and the data are both pairs, we (recursively) match the\n      head\n      of the pattern against the\n      head\n      of the data to produce a frame; in this frame we then match the\n      tail\n      of the pattern against the\n      tail\n      of the data.  If none of these cases are applicable, the match fails and\n      we return the\n      string ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"failed\""},{"body":".\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":86,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGywuIBgWGqBi6DEfRc1IahQJzEj2JidzxyguryAapqENIs4sFomzKpEaoxAYerGr+fQRuqsRWvPBI3WGQZZrGp1ziG8w1pqiaSJmqr1sLNrOLdbcdvm3zBsuOiLoYaoGDkcgFGILqer+bgnpehb2srTxJqar7+s2m6bOIAAPLQRDeqbh2a1cuFAIGftOlwYNY25youmHepaz6KG+q7rpK8wIah4R7pkBhKVBYg6DBAGPvoqhyHx56C1ws8LsZO6HqBnGmeRlz2rfCo1SlC6-QDFpIbpwZGbh4QWbZ76pOaJitCSBgbmY1QDtG3a+v1ubrG4JXmBV4HiqTd1UmYMQJAp6cwVyBRCHoOnKB2Pp7nm47Fq40V0dd92anp8IADII9mEYQ498PZKBSgfftomtuSVI6HZ-Q47DygUaWjPfcdhhnZzxRQ89gys5eoq-PT8dKE1xgdZYjWyDoM3laRgmObc1Ge-ZxP+JkCNahU-1SnBUe9nHtWWnaTp9HbpIu+YKXplKIHYnn0UFdele6A3sSZfJynqaNWn6eXqhm7X1nB9V0NmiDhdD8j6PX8683yGPopSkPtrKgLFtzvzAuBf024f6m00uBQBrc9YrRvk3DuMCIHoJWEg6B4CMG4Mfo6ee08x7CHBETecpBjAMHaGQXE2YyAsHwMYfQAByc0qZ9B4OmAAHSwKQDIr0NAkBEEwfAj1ggKH0OkTI3Aei+DQhA5hBk6GkAYcYIq5DKHUNILQ+hjDXqsLcOwzhDQeF8MeIIuWIixGkAkejXgy5TagB6HY7gAAvdcMQeFFAscIygoiZDiLqjItx8iMGKP4so1RxAiqDSgh8BgQhDCmTICwnxFM-HWIkeDYJwJQQQnIOCAyLBCn8WUCU8EJDJjMKdHgDR5UtE6JUXo1JhAhHpP8YE7JTjuBl3BAUop5SykGUqdYcJ4JnJAA","body":"function pattern_match(pattern, data, frame) {\n    return frame === \"failed\"\n           ? \"failed\"\n           : equal(pattern, data)\n           ? frame   \n           : is_variable(pattern)\n           ? extend_if_consistent(pattern, data, frame)\n           : is_pair(pattern) && is_pair(data)\n           ? pattern_match(tail(pattern),\n                           tail(data),\n                           pattern_match(head(pattern),\n                                         head(data),\n                                         frame))\n           : \"failed\";\n} "}]},{"tag":"TEXT","id":"#p15","child":[{"body":"\n      Here is the\n      function\n      that extends a frame by adding a new binding, if this is consistent with\n      the bindings already in the frame:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":71,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGywuIBgWGqBi6DEfRc1IahQJzEj2JidzxyguryAapqENIs4sFomzKpEaoxAYerGr+fQRuqsRWvPBI3WGQZZrGp1ziG8w1pqiaSJmqr1sLNrOLdbcdvm3zBsuOiLoYaoGDkcgFGILqer+bgnpehb2srTxJqar7+s2m6bOIAAPLQRDeqbh2a1cuFAIGftOlwYNY25youmHepaz6KG+q7rpK8wIah4R7pkBhKVBYg6DBAGPvoqhyHx56C1ws8LsZO6HqBnGmeRlz2rfCo1SlC6-QDFpIbpwZGbh4QWbZ76pOaJitCSBgbmY1QDtG3a+v1ubrG4JXmBV4GcHnUhjAYdoyFxbMyBYfBjH0AByc1U30cDuwAHSwUgMlejQSBEJh8Ee4IFH0dJMm4HpfDQv2PYM53SFd4wiptu2HdIJ2Xbd16vbcH2-dDQPg8eMO5cj6PSFj9HeGXU3QB6ZvuAAL3XGJA6KWuI8oKOZBjurE+7lOK9ANP+IzrPiCKwaoI+BghEMUyyE9weKeHhvY-BifgVBCFyHBAyWHP-jlCv8FhHhawPadPBc-K-PC8z4vt8IcPd5HsfD7t24NOME4Iz4X1vjfAy99Jiz3BM5IAA","body":"function extend_if_consistent(variable, data, frame) {\n    const binding = binding_in_frame(variable, frame);\n    return is_undefined(binding)\n           ? extend(variable, data, frame)\n           : pattern_match(binding_value(binding), data, frame);\n} "},{"body":"\n      If there is no binding for the variable in the frame, we simply add\n      the binding of the variable to the data.  Otherwise we match, in the\n      frame, the data against the value of the variable in the frame.  If\n      the stored value contains only constants, as it must if it was stored\n      during pattern matching by\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"extend_if_consistent"},{"body":",\n\t\n      then the match simply tests whether the stored and new values are the\n      same.  If so, it returns the unmodified frame; if not, it returns a failure\n      indication.  The stored value may, however, contain pattern variables\n      if it was stored during unification (see\n      section ","tag":"#text"},{"tag":"REF","body":"4.4.4.4","href":"/sicpjs/4.4.4#subsubsection_4"},{"body":"). The recursive match of the\n      stored pattern against the new data will add or check bindings for the\n      variables in this pattern.  For example, suppose we have a frame in which\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      is bound to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"f\", $y)"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n      is unbound, and we wish to augment this frame by a binding of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"f\", \"b\")"},{"body":".\n\t\n      We look up\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      and find that it is bound to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"f\", $y)"},{"body":".\n\t\n      This leads us to match\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"f\", $y)"},{"body":"\n      against the proposed new value\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"f\", \"b\")"},{"body":"\n      in the same frame.  Eventually this match extends the frame by adding a\n      binding of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n      to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"b\""},{"body":".The variable ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      remains bound to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"f\", $y)"},{"body":".\n\t\n      We never modify a stored binding and we never store more than one binding\n      for a given variable.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p16","child":[{"body":"\n      The\n      functions\n      used by\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"extend_if_consistent"},{"body":"\n      to manipulate bindings are defined in\n      section ","tag":"#text"},{"tag":"REF","body":"4.4.4.8","href":"/sicpjs/4.4.4#subsubsection_8"},{"body":".\n    ","tag":"#text"}]},{"id":"#sec4.4.4.4","tag":"TITLE","body":"4.4.4.4   Rules and Unification"},{"tag":"TEXT","id":"#p17","child":[{"body":"\n\t  The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_rules"},{"body":"\n      is the rule analog of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"find_assertions"},{"body":"\n      (section ","tag":"#text"},{"tag":"REF","body":"4.4.4.3","href":"/sicpjs/4.4.4#subsubsection_3"},{"body":").  It takes as input a\n      pattern and a frame, and it forms a stream of extension frames by applying\n      rules from the data base.\n      \n\t  The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_flatmap"},{"body":"\n      maps\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_a_rule"},{"body":"\n      down the stream of possibly applicable rules (selected by\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fetch_rules"},{"body":",\n\t\n      section ","tag":"#text"},{"tag":"REF","body":"4.4.4.5","href":"/sicpjs/4.4.4#subsubsection_5"},{"body":") and combines the resulting\n      streams of frames.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":403,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwMwK4B2AxgC4CWA9oaAM6kBOApgIYC2A+iwA7dOEATDgKYAbFgE8mAgBS0AjABpQI8VKG0ATAEpQAbyygjoZqXwMa5Wh0L5RoufO2Hjr4wH4VYydI5aZzm5BAFyg3CzkDDIAFqyyCtqKLkEpxgGgALwAfHSMrJw8fILC3upyeewcpBEOCUmpDY1Nqao+GjraANxYAL54RGRUloSkTAyirABuTCVq0o7Krep+OvrJJkxmFqBWNna1Tuspnku+-oGNoeGRMXGOiUfNoOnZOyNjEyzTs20yp+0BepPYEgl45ejMSrVcgHbRw7p9fokCjUXKQzi4cSkNg8GQEQjKWi6AyuUzmGiYlikUaEPwVNjldEcHHcPFEQnw3pIwaoynU-h09GM-LE9Zk7a7Wz2YXsC4NTxS0SPNyhcjvcZTGb-GTKxqxFjxekPEFGMGgPk0wX5GWcaG1I2cxETUgmOwzYiUIijBiZUAABm63JRNEITAA7hwGG6uLxRORiFShhxyLJRaTox6vWNfVGJhxM+rQABqUDybqkzbk115gvehFBoagHEAaxmoYjkxYDHILAARhMZJ3u32JspczNCnGE8HkwI08ZxTQW232Ew5BI2L3KKIOJRcDZV4Ouz3+0xdCWAEQcC-F3VPCFqgDm5FwEhk45j3Cnieos8dOHxHkaGYQhVw4IcTwmaw1XfN15yMD1CHoasJ1jeMf1pFNfXbSNo0ndCZxTAJy2MQDg1APIZjDFhRGbGQmAAD24eC3EXHZrAgkc10Y5jQDvIJPGXGxw3A48uPopixzwtDpyTFM5WaVVrGuKIeIUppPBUmRKI4ajaNuA0JOY40TTcHS9Lou0jLhdTLlAHiSKMPoKy2GhzJoujxy6LksBAUBKD4BgMKqLjlG4fAXRYQRQEfTZfLAXAGEoNhQGIaIeG9UAAGZnloJggOytAsqK5wG1RFhaFoShiBkVsJDHfLKAYAQiTWFyq0lfZ30a5qiX40BPCIERcDVaR+tCJgAEd8Bo2qmHq0B9VkJbuo9XqbP6zwVuYNaWtslVQAqqqarq5QrJ2pq9u8xEyMbITqlPdISWMRDkNEaqaJC09fTjegZAvAAqB6JgBi9vNcW7UXeyhm3wVk6o4JRQAR1ZnqCV6XVofBe2BphfSO6q5okRGzpqGR3oTHdcc5VIX2eXYhqYEbQ3ibHqZY1I2MZ5npEctwens0Q8rapoMY2Xb8cqwmUdJmE5DZriaaaNiGcEJnRtkC7mv25pBrVnmBH61JQnOnq5z51xnOMK2jEh4Y8oYUgiZJ5H5o4TRlE7UR8DPEX0eoZCsZxrjJeO52kasinPvZi3jDpmRVeGjX5eD084T9ho8tIEK5ajqnQqNhotN+p2EaRrSZdAL2fbhIFTJSSOPvztOlaCAWxGFtGGjFrWBFD6W3Y9iiyaDmOjfjxP1ZZ1bLvTrvmiznPagV086-r1wtIrwfPZomvZeX1OJhs2O28FzvC+MRfTd2nfvbPE-+d1G3QGfu2VCscJSDSmQ2A5hdK22ClDIwDQAXmhrDbgF4L4DVAOAuG0DQhAJAReNUDtSBQJBJ4VBYxSAIPsgwJKUQ2DKAvEQZshBKBhhoAFMYGFQAAFp6HD1PGDPmz82ICA-lSNK9YsBixoUFGcuNfT3XEt5MWsUXQZH8oFYKuN-pwMgeIgOLpwpSJkbQoR4kUFIRwawgCAxyJCV7GqThhBHxHmHKvKuu9fZdzYlpTi1jq73y5G-ExggnyiSsQODxZjHwsTYitPxT5rplRoCE8xok74yEiQEjObErJxLCe40xXi1QcESoeJxo5zRBTYHYsUACaAExqjkpgygskFJSYYxsjEaSyHKbfH2lT8mFPatsLSxi0nmMsZBCpNi76JDyauMJ4T2IhUfLFIQJcZAejYNwag-BSBnViJMwJxSJlaXmYs0MIxdAADIDmLTuDspZ+zMggNIGs6oj5eFv0lIeM5ezSAbNchM250yOCzOecskhoECn6JurU1EIgigtV3IQIyzBKpDB3j4gZVT2mkRBW5ZgVEPL0T-kYCeHExKPTPNitw8cpozQcE0+yc9oEbHeYwH2D9LZnzxvPUWKjQC9l9HE5MtIkX0VaaMhlKQVbWG5snXsOtMHmhonlalKQTbot0pirlLjYmtwaM-RlHdmVG2FRwLSvtZVGE8O5fSK1CWgAAD4Woogqiy2kyaEsNaAUIuBpVMAfs-dhmyTV0R4jC2gQwxlv3qfwIQL49WUFhY9ClLj+XVIzmLOJnKemPm5ZktpfTQojOqXzeOABCCZorp7JKJVzQgL5iY4i-tEWJKbok+1rZ48xwynUNFjdm++fFNVCzxri7x-SjxDOJKZPyAMx26kTSm5NTbU0ZN5e2pF4MhWbILZPA2jb-ESoEqAIgFbmTcJrU01tDRlW2I3aEte68giLrwSGwQmbnG2Lja47twt45gtDdYagg6Wk2IRc+ueoBR3js5psi8rqYTSAvGwplGcOk0DvY0-FuSF1tKXU5Hyb9d2vn3dWmQ3By5D0XQkzZSLLnSPAzUKDm1QEQYmAIDBdlSWzQI2FHQNGkXjQmeU-DTgu2NE8Ih5M+5FlRoHKxsIRG0Ncd2Dx7gqx17AYBjRoT4bRMBsevJsKSNiNAbAGO5TTQlJ6oiFEAjhzjm7E3uxjSO7y04ard-Ky5nL1XuczoVz69sOVoPQZWQLnj0mhWvJkyV6QSLq3c62jVGGP3NRXQJ8zpfwQmtAxN5VYtIMWUGaRUYy-J21oHk5KEAYDwCQKgNA8g0CaAMciRsuw4zelmr8i59jNm7E+b4H5yVdl-NAY12hoggXjIG0FHcKqWuvP0K4Ip7yVpWUm-+cZQlRuzRcel7YsywHkCa0N5prjgV1dREJAFa5aAbi3KIDbNAtunYvISC724g3xfO5ubcu59ynbmT185U22tzbuAtn7LylsPOsEdcgj5CAFJGN9hZv3rsfJYFMrrVgnaTZIRDqHMP0E1KOyU2F2Pll+Eew4RbJGAeGSsvNsmi3j5uPi1j6HxOXEcD9UwWF37yf-arDTuWQP4cg9B-F3YIhiDiEEUMOHvXWuzY6tYTrMy0fS9+yQjGUVs5i4lxhMGlqLX9Q68jr53XBd9YvOUko4uuw690Fag3Cujeo7+hj2jqLLfa+DMN8ZWvrczle5dlXIOKdVn9+9vcB4Cl+ftXLOneOCo+8l7+Vn7POdQu53L7YfOHAC5l684X+OmwsFbPmFRGv3e+6l6d-bbOmL+sDcHzbyuLzq5GOXxPhB7ugCr4Mn2NfuB1+oM9gvDX2C9gECwPvA+0-A+WYjw3KOlfO5nyMEh4hNzj8nxzgN1BhtvzX2Pif4Q2nehJ29oWgfZ8N6XLiUPO5w-d6zxf-Z-49+j431uAQb50-wZOVTsmOeEd88CoVs38J8U9t8oUj9VxvRaBlAP8JBEctt98N9wChhO8oCCkYC4DKBP8h8Cpdg7Y28MIn8-sABIGbH-efY3ZXF3cDN3BPG3esN+QghgmcL7b-f+d5EuSMJmEg5QJwJg+LFg-KD3JMDAzYMYWgEgxAtHHg3APg0AHQQQgvYQq3dvDgeA6Qq-WBWQ5geQl3LKOPciVQqmSgEvJCaoVvLXLQnnQBIvd0UvKwkQivb9aBEwlw2kdg5fV5TzVIEA9fMA2vLfKXJ1dw9Q8QmA6Q3wpoMI4KTQ2POLYfawRcOkKkJgHHGw5IXVRXb5Gg7wkhFI+gNInHXfeLFI1Arnbw+CIJQHWnKovA8iXYRCThYMZrKo7Qqgp3dHfI0BZonbIYT6CojvW3fXJoToxfbo03FfXo6gFogYncIo0YEoowxsPo1oncfvaQAiNcDgmlKsbgvQhQgQhnAvNY+Y8wvKaaZZTIzg-Y3Q3gl3JQk4gqM46gT6Gib0UCCgaYG4owNiA4h4nowwxI-A6wS4n2EgM7bEP7LI9rB3BfXIv6egNgFZUBcE-gYgJgUogvdEyE1IpY5ZKQ5Ev7YwWEynWQKyYkl-IQyIegfE9I644k1qNGGowyJklY1EGFbORYhkkYIk6E5kskqsSkgUjkywawdI7gUgYmXEzE8oFEwU24iUawRUeU0gIkZQ0E75Cqbk6oAk2Hdkv2XVVUkUhUoAxo6wfsaqOiXYvY5UyZagpfKY1Ei8K04gZsbEgqN05sDQnAr-do2wmgR-OnTUoxewjQimOiHknHGQv6V0yMzvaM2fEEi03cWRUgJqEvTcNUYg7ncg0kygkVUCBgYmARKkTM+ZDxXM9ou3MYy0nMkstMzRCs5KKs4MaQ0M+rIsrsUs9Mls7Mr4qXPMigpU8Uh0rohQ0hYs3s5shgLMtstAsUiZKsxsssjMucysnM9s4cgs0cpHBEk3XPEhFcmcwRfshcnfJctczM2-X4v4zZAE-Qno44voZg2k7OMs+9W0-4+4p8505QJ418l7RqYoT82Qb8h838hQ4EzDeLISfCWSb9QgoY5QLsR8fAHHTfVPRUvcrbBCnXaIlIZCoI1PVChgdCzCoYjU2Cgva8jc1srcpMDMz8b8bcgM9YfhPsn0aROi0-APRbPmXVIgHspss8+igc6s50yLQScM-C9sk7Q8Oi0LMLIIWZEaBgOksC6QuELjeCmSYghSyPJSwiq9NS980SqKcCqokylSowPKZoiyr8+ohorsligiIc9ivc8YxEyYo80BOSxczs3kN3IYu81kikuoqSpctCrCiAqQ3Y8K6PbPSK3PenQ7LU8cGQI6HBevQM-cx0p2bKx2OFUBccT08iRCcXfACA2CI+abRK86OCLoF+WrAqD8TQryDolUrqKyRqo+HS2zPC0QaiCQBXKMLEyLUIR-PqwlFy8qWMYmCfTK8cZQK4xsz+T41an2Rs4jLuMWcXVgWkccHMfgMCcpaCKFLyPmMWbzHgrGUQdRW6xzGtNa4mDasYAkQLEESq72Gqg6qKXCI+Gy2yowV69NAVDPGgW6mFOwKRZBOjajWzRULjJgauNIjgV62qmYeIz4I6uCYGkEANcxJLWkFLdgGQaGjnWG80xsSRK0cmuqJGOqVGDitlQraRSRImJm+aJ4wsjgIteYVqBUfYKLWgFM+rNWBiDgBGPcfDKkT44dRK96iwZq9K4wzYNKQGjnOW-kCwADbQum0xRiXwccKQ5WwgJcw2yWk2t0M2+Wj6xHOmsmhkI2qWmW+Q824ZC8ccehZ2r3N+ScYmU2nWzajtRHZ2zJLEFkLGzIHIQOrgLWrGsKe2vWsOgm5oXADW6ILWu23WgkMOsZI-PKDG7a4maYBgLcPKGQAAciKqdhBuMAAB0sBMrChQ0qgzDcAmoGRFRlAFoED04QRq6SFy7K6Jrugi6ZgwbR7I01xa7KocEZAG6jBm7W7eB27mKu6GAGQtJ8BPZhkFpd7lAAAvWuFeo4Nu4oTe7uwcPuk+mydeYe0BGevKfRPAcyqKWgMMMYGuy+oQa+7emQLLUABaPCzvV08B4gcBhjOEau7yPySekusYMusYMe3+9eq+zum+4B0BpvFgcB3sSB6BsGbQJ+i8VhIAA","body":"function apply_rules(pattern, frame) {\n    return stream_flatmap(rule => apply_a_rule(rule, pattern, frame),\n                          fetch_rules(pattern, frame));\n} "}]},{"tag":"TEXT","id":"#p18","child":[{"body":"\n\t  The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_a_rule"},{"body":"\n\t  applies a rule\n\t\n      using the method outlined in\n      section ","tag":"#text"},{"tag":"REF","body":"4.4.2","href":"/sicpjs/4.4.2"},{"body":".  It first augments its\n      argument frame by unifying the rule conclusion with the pattern in the\n      given frame.  If this succeeds, it evaluates the rule body in this new\n      frame.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p19","child":[{"body":"\n      Before any of this happens, however, the program renames all the variables\n      in the rule with unique new names.  The reason for this is to prevent the\n      variables for different rule applications from becoming confused with each\n      other.  For instance, if two rules both use a variable \n      named ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":",\n      then each one may add a binding for\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      to the frame when it is applied.  These two\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"'s\n      have nothing to do with each other, and we should not be fooled into\n      thinking that the two bindings must be consistent.  Rather than rename\n      variables, we could devise a more clever environment structure; however,\n      the renaming approach we have chosen here is the most straightforward,\n      even if not the most efficient.  (See\n      exercise ","tag":"#text"},{"tag":"REF","body":"4.76","href":"/sicpjs/4.4.4#ex-4.76"},{"body":".)  Here is the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply_a_rule"},{"body":"function:","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":true,"prependLength":352,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwGwKYAuoATgK4ED6AxgPZkB2h+JoAvKAAwDcOAZo2qEAlrQagG+AO6VyVAIYAHRbmHV5IsZWEATABQBKUAG8soc6Qr4a9Ji3aWqdRs1YBqUAEZeF0kTIk4nLWznYkvAC+WAIMQqLiALbyANbWkjIAbvIkwvIARgR6WTn5BAA0jtZKKmoa8do6Rqa+JP6BoEmplAzyCfh6AM4Angl5tLiUtHzdvf3FuQX4Rh4ARJQroG5mvju7OwOEOQwA5sJ8Q3rBlNWq6poMDQYGkfyC9349fZTzpfgD2gxLlYmttzHQGAdKtdlLc6lpdA50rIrNCand6rpDD4LDE4mJQId8NYpPJcMk9PgAB6KEF7PyEALiYT-H6LCnUoygum+AD8HRSaWk32yC0KVMUFSuN1q90eXO55gAXKBmZRFPJhCR2TT5Qq+erNXpCcTSeSABb4eT6cVPMq6hW7Y2UElko0a3Dap4Ge105Xi7HmKItNriJ0u8nBZ5YKJYECgWiKFhwh6EX4VRRkYjyBg6UDHIixsB8Ei0BKgahmpSuUAAZlAg3wePENbQLZr3uib3ioHkAwGtGoelSQ0ljdoJB0A1pFlaDPaqoYFA9rToE6nPosfMYOnwfGEkh0G6VoHwAEcyKSh-gR6ALVa9Hf9Cvx5OvUfQHzH5cx2vvQ7lb2-aDsOFSpsIy4-q+UYxri7ydNYqZstOYJiJCuADqSlCIQQDiqAcegrAAVNh+CESsUa+LB3bobQyRkIoV5DJQngVMOlAAEzITs4KQgMZB5CRDiAQOjHMaB7p6Oh6gTCRTwBjsZz1qq267vu+D6HxAm-E8JjvvSjKgCpe4HvJvgRCeuADPgukOuWqHEM+E5CX2Ilsex4ngYM-GyRRDqzgZyk5qpB7fqujR6XsW5BcZ6kRbsypgRBYW+bsQYWGl5hUfi+5WSQhCiSxoBuRUWS4GQSw2XsPHEJpgkcMJwHXmJBISVJmE+aZFiKXogU7jFGnedpXF0lZhBYa1GEyWmcV7AaWp4flbGFXNonuaApXlbaM0OolkmTeNixep1gYWVZlUKtVfhhc5QGrR5Hq1UNx0KXwSn-EZalPpBOnNLZFijeNnmPYsdp-bZK0rcV62kpt91eVph1yXp5n4JZ1m-WDAO7Y5OglTDSzPWZPoZaAJNZeIOjMuqhAVnoCTDTOIYdOwbAcCsNF0YoKwzXyHP0TNyplqzbM5SwhDc2DH4qhCYsCyeJAllqCQVCsjDJAwtBSOICZJu8AC0estYs5HyST-ntJTAzUxWLxYJdOskMmB04Rw8HO-0UaXfmxAcA7TskQRfNc579mgBmPvxomjuygHKyi3lJuvLEcECpQeT7pTJxFCKabQ2VFUY-p7Qray5R55tLzk6A6c5vuxzCiUbI15nxxceb4hfs3dfQZ2yfdl3JzCvnegD6351F6GEmjz3VejwClDFrM2eN2Xi99G3TMNcvor4BUa8E9GvdNielLMDm2+5xtu+gPvG9zuIK1u6PF8g+XSx7476+21Xqqpsc+Y6EoAtPQdAEiKDEPgJgoELTjTHoXduKp-grVAeAyQTAjAADIMG3ktPoFBED0Esw4IQGBf9v5dmyv8T4-R8FoMIHfAK-w-4AKAcyfKtDIGEBVtQxOMEKEU3wImHM-wxDalaH2eIeMV7X1vuPKuYZTQUgZuYbqqpS79CWMol69YzwXg9Ooiomjx62QQYccqhN0qnXRttS6eQHBz33AvT+GiP6zBSn9BBvVgrqRHn+SWkUb6kisttPYCVWgmldHPK+vj3F0hJmZKxxi9ieKQRqLUFUQnmD5Ao10X4jEAB98kEnCc6RRu1NGZNAMqPgQT8DPRJmbJmOTyTinEQMeIPcj7vCpGfQBZw1S0AkWyAxb9XHr3HrYjOdd7FTMHo4-eL9V7OPcd1AAhIgygH0QrTy0QgxgZwmJJBpmaEesz67ROnhUSp3Ir5jIJqALkKM0Yqlej1FkOdhn4x+v40AcZCL-J9JM2uJwZnAvrvM5x2d853NiYze+oB1leP6qcsFfi-pRQOZQI5tMDHXO5FE-GKKW4GFBj8h0t85Y9MgfoEZtyb7LNNok7qO4hGTkmICOlIzb5NF+WAf5hEfQIJWDU8C6kViMtRmdQuwZ4VUvPrS-GMLTaHy6d2fZ5wsUaFpooZaa1ZHwKZvvIhoBhXujFe+PkprRU6AlgqP055Lw6vTJxC19LZjvmVGoj5hQdWcgdHyOVfTpjgKGT63VMKPUbPUXoRQnEyXmD+QC-1J9enaGDYM9pbJY3pkKrI3loB+WRtVBDTwmDsHFrSTGl1yb1WHK1Sc3avrSXxt8I2zizaW3mFrZq45D5cExtLR2zttkvyxpJXi-x3LI1WoIDa8hfd8TtJOAQQgWgDitF6HoSkDDi6VspBUQw7AAB8EglydLjOTAY9LSwQBgPAJAqA0CeDQOxJOx9VSqFcJeDhhCDXwt-vIf+6lWH4R-Vwk1n6ky4F4aq-EkHHYTGiWBnlFguQIK-LtZDnSq5u3g5eK+O7xDAPZsIL90G8b52w-w-kXRqGDBGGMXAhHQDEZ4RUYYoxxhUYXeIDjjHJjTDo8h8e6H+2YdLKgzhSM+E8Y2YBYQxwGB9CYCAiTBD6EiaZgBoDgDgFgZVvJxTynxYz2o4ZpTnDKB8fGKpsB6nmMYYko5zyWHpOwfEOZ4zQ9yqUFaX8dpojhN-oMs5j04m7N0KOiqn+-wdzUFwNkZMtnJO-rQ1pphgGWF6bU3QlW1VsxjTiwl6O8RyKgEKe+bTWW2HJfUyrdRlAiuJfuGVirDoqvAeyxFzhKtyaNcbMV5MMH3OgCayVtdDGbNBbS-C6zEwpgzD6H2+84WUv0Lc1XMbTsr6+epG0+ItXIuafhaFt0LmctSbcyNt2+WmD9fi81g71CKM+b8xIsQzHiO3cKwNx7YgVgVGe2-Xbih9sffne+-4CXRg6HkCDsHgJpsysYbA6roGLtQIg70PIsP4f+dK6Z2T0Ocdw-VM41wVnJuWUO1J47BkkgMTmwJxb19TuucrtR4nuOxg6AuEjuFIWxMSVW-Zq7OHU5c7h29gLgIyezFcAMCoPOhifZq+zbHuPpelfTIlvoCule0F59xyHC9+H3cG-cGnv6ACQvgZso+YZ1mr+mTV9a2y1wnx83e-fGw8ITGONPBfaAtWQu4rfgdLRz2T3uHu+7VLrogLABjh9VwcUPfBw8VE4lHr3Zv3f1GVynunwe2Hp8z7WT37wY8yVoDYCEqY7tFaL0HxIqdvvm7+4CGa1fO8s5T0OhUuGNdS72-j0RlSe9x7l3rpP-eJ955907Qv7PovUdVO3KzqZmDGeb6CFJqOnfo+65jlYG+DgaHwMZmDVcN9a8CwH5ComVsSSwxD94qpwSU3uN+h-xemQZZ0xA3YQDzyzEC-3iEwjvwYFa3yUqwALR2AOP3AxWE-1IwgImHP2304Wv2o1QO-wmFB3UhlBoV-wxgQRD1aAzxd0j0PirjwPQLrysnPE4V3wFxLzT0oPL2z1oNwLALQLEEwlJFcB6BEAyBIKQMfyZgoLDxd3bDf27FVCYPKliH6AOASEDz33SwP10xqzUOQKUMgWoHwBwNkwMJUM3wv2M2Tz0JQweTYI7iFyBkIHUI22oz3BIDT0wMvxYL0KnHOifw0mcMICnBz3eHETGi8KsMGCCL8LIKaQkl8MrwUP+Ev0UEICYjMKMOiPUNiM0P-SoSXGyOCKSMoSAV7AiK328JU0SP8K0MXFwDCwSJiLFzX3+AKAHHJH53MH30dx0KPzWxVnaOoGSBMOPiGOSDTkNz51IPt3aDZwfxKNby6HGOiMsNpxbxYzV3GIB1AEiKk3kNKL9lXRIBsFGH3CSyC1t1Q2R3nHeh6BICYiOPHFOJrguN-zawVFVFeIeMmCjg0GeNAVeMt2Q1COSM2XuMeL+OOJePOOBNIKuPMFmP-20KAPL1VghN+N1gBNLCBIJ1BNKO+MhKxJOMBNhIO0uLtxuORN6NRJdxWEJMxOjmxLOJELxJ4NkyeJOLm1YPsM2I4JkJAK8EWJvk1DTz9nPi6Inj5LGk4Jd24KiCrisk-0ZOzDwRmKpOlLL1kONxTi6GlHRFET6ygIqGyGODIC8ygNyI1OI31KGwHwVCNNH3ewYBNJIDNItKdJlxCNXw5KhOZNxK0FXVRFhDhIkImVDk5IcE5Mp04w9BBKRI2UYGyCJKZJJJxLJPvwkNdTdltMtzdjo05PHWHTpGAXcLFL+IlIWLRV9BoyqBhBlAO3zKXkLPtOLNLNFLGnFLVIkNbOLN8CVLAJVMrIkJaNk1VFzPJPVO6K0JpK6wGJNQnP+2FMdMIOdJ5KlPmJHPxI8zdLx2dOTy6ICLO0aPOxHJ1LBOCD0EAjFg6T-w2VnJq2vLykkRNWCFGPeHBHizIBlyBAIB5SPOxmBGeFJjfTCJREL0jDvIXEKN2kAr-KeFdRtNwBJCGCYXIGMOrNCRwWf08jgs0XPPxBuCYjh0vOCAqGYJ+OpmEPIvKh+P1S5Euni0tAeGCAcFaGoQbh3n+H3F-IPl8Eum7XEQoAjm7WxROQoqYiopYBdInUlk-LKh-KYuzGRD-N7L7N8AkqcTcXkj2QYExSEtwB9lZldzNRtVdXqNwEjXwA2gv0oAkt4smN5xAQIGUsjDUrJSXWOBXTXUJE3UEr+GEquzJysjstoqYjEJIDGCsj0AAHInz8p1LzAAAdLAS86oalLCWvPgccBIPQCyioG8FXHSSWGK+rFgKKjC3gYK6wTSiKiq2K+KvQRK0AFKtK5QDKoM7KkgXKlaMgEqElUAG8XqioAAL1tGSvlHSpzEyoXhyqKAKtGq9HjVKpNTqsGUqv4A7OuAhCkBYAavaums6rmv3UGoqBtJ2PpIuuoAuptSeBiqjDjGqtCpYHCvKvWv2tZRmq6typOpvHOsGKupuvIgMBWpWBNiAA","body":"function apply_a_rule(rule, query_pattern, query_frame) {\n    const clean_rule = rename_variables_in(rule);\n    const unify_result = unify_match(query_pattern,\n                                     conclusion(clean_rule),\n                                     query_frame);\n    return unify_result === \"failed\"\n           ? null\n           : evaluate_query(rule_body(clean_rule),\n                            singleton_stream(unify_result));\n} "},{"body":"\n      The selectors\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"rule_body"},{"body":"\n      and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"conclusion"},{"body":" that extract parts\n      of a rule are defined in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.7","href":"/sicpjs/4.4.4#subsubsection_7"},{"body":".\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p20","child":[{"body":"\n      We generate unique variable names by associating a unique identifier\n      (such as a number) with each rule application and combining this\n      identifier with the original variable names.  For example, if the\n      rule-application identifier is 7, we might change each\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      in the rule to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x_7"},{"body":"\n      and each\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n      in the rule to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y_7"},{"body":".(The functions\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"make_new_variable"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"new_rule_application_id"},{"body":"\n      are included with the syntax\n      functions\n      in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.7","href":"/sicpjs/4.4.4#subsubsection_7"},{"body":".)\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":12,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwGwKYAuoATgK4ED6AxgPZkB2h+JoAvKAAwDcOAZo2qEAlrQagG+AO6VyVAIYAHRbmHV5IsZWEATABQBKUAG8soc6Qr4a9Ji3aWqdRs1YBqUAEZeF0kTIk4nLWznYkvAC+WAIMQqLiALbyANbWkjIAbvIkwvIARgR6WTn5BAA0jtZKKmoa8do6Rqa+JP6BoEmplAzyCfh6AM4Angl5tLiUtHzdvf3FuQX4Rh4ARJQroG5mvju7OwOEOQwA5sJ8Q3rBlNWq6poMDQYGkfyC9349fZTzpfgD2gxLlYmttzHQGAdKtdlLc6lpdA50rIrNCand6rpDD4LDE4mJQId8NYpPJcMk9PgAB6KEF7PyEALiYT-H6LCnUoygum+AD8HRSaWk32yC0KVMUFSuN1q90eXO55gAXKBmZRFPJhCR2TT5Qq+erNXpCcTSeSABb4eT6cVPMq6hW7Y2UElko0a3Dap4Ge105Xi7HmKItNriJ0u8nBZ5YKJYdUkAbWACOZBYQ2+LDGCb0AHJ5AMEyRCHoHSXfAAdLDBPTVfAMHSUQi0Sh8WgkBJ6BgUXAVIY9r2lizZiorDIZ2gJlZRuMJyjJ1PpkiZ-q5-MsIsD0sVqs1usNpsttt6A1asgVDIGHsVY96U+gABetvMFZ2O-rjebrfbGUv9-7G8Hw6jou474JOvDRJqBzXBCUgsDmr57h+h6Uj+qgHHoKzyCsw55NhoArNQeErDok4GNmUYgKA05JimJBpkBS7wcotZvvun56ChoC9qAaFFphRG4cOhHDiRTxDvhYFAA","body":"function rename_variables_in(rule) {\n    const rule_application_id = new_rule_application_id();\n    function tree_walk(exp) {\n        return is_variable(exp) \n               ? make_new_variable(exp, rule_application_id)\n               : is_pair(exp)\n               ? pair(tree_walk(head(exp)),\n                      tree_walk(tail(exp)))\n               : exp;\n    }\n    return tree_walk(rule);\n} "}]},{"tag":"TEXT","id":"#p21","child":[{"body":"\n      The\n      \n      unification algorithm is implemented as a\n      function\n      that takes as inputs two patterns and a frame and returns either the\n      extended frame or the\n      string ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"failed\""},{"body":".\n\t\n      The unifier is like the pattern matcher except that it is\n      symmetrical—variables are allowed on both sides of the match.\n      The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unify_match"},{"body":"\n      is basically the same as\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pattern_match"},{"body":",\n\t\n      except that there is\n      \n\t  an extra clause\n\t\n      (marked\n      \"","tag":"#text"},{"body":"***","tag":"#text"},{"body":"\" below) to handle\n      the case where the object on the right side of the match is a variable.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":18,"eval":true,"prependLength":118,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGywuIBgWGqBi6DEfRc1IahQJzEj2JidzxyguryAapqENIs4sFomzKpEaoxAYerGr+fQRuqsRWvPBI3WGQZZrGp1ziG8w1pqiaSJmqr1sLNrOLdbcdvm3zBsuOiLoYaoGDkcgFGILqer+bgnpehb2srTxJqar7+s2m6bOIAAPLQRDeqbh2a1cuFAIGftOlwYNY25youmHepaz6KG+q7rpK8xRWYMQJGEBhpzBXIFEIehiDoSgdj6e55uOxauNFdG6YZmpmfCAAyIXZhGPnGcF2SgUoNnyaJrbklSOhnteiWBcoFGlqV9nKep0F9HVpmWf4lWXqKvzFfo4gSBEVJ6H0CHCECNxnGI964eRzmrcoQJytMzovEdhbBWFV9UgB6bHU5psw7aDoskjuHo9w7t2t9-MXJjI8cM0w13gEFhGTuh6gcd-HVfQtPUfdVt3zVKUWD9cCilKGROmMPP-WaX3iH9wODtG3a+pmxtQyouMc5jjjtdrhh0YLLvW-ZP2GADtgg5W4PwgAHx3le+7Xgft0dJetKRjviCz2IqKo9PV-XoOnZdwxnA24qkxaSGmapoV5-wV200k6Iz6hXb6nMzwXWLodXapcCavWAWA-qocDAAEI55tlWjA+aIdYjtQcEKXENxmKqEHnNPaCMyHrW4GfbsoCkbwIRKAckmFsLujDqKYBXUEa-hbqAPAkJBEhkgdg6BQ9xpwNVtw-MSCq54Jrugt8FQG5YPEc3UMgY6CEIYMQliiDaHdjuiPC61gwJ8P9MjJe2lv7Q0QfDGRDDK4uVYXqF8FRbahAYA7ehdjkbPH4WAQRkIQztXBO3PYtRwTOKnqneRs8IZQ0GHY+hyNnEDWJp-AhMgiFUBYoQOct4va4XakDaW-FwkcGECpf0pQwkRkiVJbS7ROj6HydwQgpIpJt3gY0ueXD8nhC6V-RJ90ZD-0AY8NpPBCmMN6Zw7qsNXodPCOYgJoAglDIST-UZ4zX7TQ6e0tkXs1kbNDM0HmC4BmgBFnPdGyyhlZJySQ-Q24BlmNWbEV5pJ3kfLKFo7JOjcmkK3m8gxqyQXfLBeYvxvS6kRKqUTecpBjAMHaGQXE2YyAsAAa9AA5OaVM+hfkNAADpYFIBkV6GgPFMHwI9YICh9DpEyNwHovg0It1xQZTFpBsXGCKkilFaLSAYqxTi-Q+K3CEuJUUMlFLHjUu2ZQOlMgGWtIXLwZcpjQA9HRpq0AAAvdcMQyVFEVSIWl9LSCMuzKy7gRq5TmK5fxHlfLiBFUGlBD4DAhCGFMmQCV5qqbKqtYy8GdrgQG3BOQcEBkWCxv4soBN4IqmTFxU6PAgryrCtFby8V+LCA0pDaq61+hw06u4DTCEMa43JqTQZVN1hnXgmckAA","body":"function unify_match(p1, p2, frame) {\n    return frame === \"failed\"\n           ? \"failed\"\n           : equal(p1, p2)\n           ? frame\n           : is_variable(p1) \n           ? extend_if_possible(p1, p2, frame)\n           : is_variable(p2)                    // ***\n           ? extend_if_possible(p2, p1, frame)  // ***\n           : is_pair(p1) && is_pair(p2)\n           ? unify_match(tail(p1),\n                         tail(p2),\n                         unify_match(head(p1),\n                                     head(p2),\n                                     frame))\n           : \"failed\";\n} "}]},{"tag":"TEXT","id":"#p22","child":[{"body":"\n      In unification, as in one-sided pattern matching, we want to accept a\n      proposed extension of the frame only if it is consistent with existing\n      bindings.  The\n      function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"extend_if_possible"},{"body":"\n      used in unification is the same as the\n      function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"extend_if_consistent"},{"body":"\n      used in pattern matching except for two special checks, marked\n      \"","tag":"#text"},{"body":"***","tag":"#text"},{"body":"\" in the program below.  In\n      the first case, if the variable we are trying to match is not bound, but\n      the value we are trying to match it with is itself a (different) variable,\n      it is necessary to check to see if the value is bound, and if so, to match\n      its value.  If both parties to the match are unbound, we may bind either\n      to the other.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p23","child":[{"body":"\n      The second check deals with attempts to bind a variable to a pattern\n      that includes that variable.  Such a situation can occur whenever a\n      variable is repeated in both patterns.  Consider, for example,\n      unifying the two patterns\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list($x, $x)"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list($y,"},{"body":"$\\langle$","tag":"LATEX"},{"tag":"META","body":"expression"},{"tag":"META","body":"involving"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"$\\rangle$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":")"},{"body":"\n      in a frame where both\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n      are unbound.  First\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      is matched against\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":",\n      making a binding of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":".\n      Next, the same\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      is matched against the given\n      expression involving\t  \n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":".\n\t\n      Since\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      is already bound to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":",\n      this results in matching\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n      against the\n      \n\t  expression.\n\t\n      If we think of the unifier as finding a set of\n      values for the pattern variables that make the patterns the same, then\n      these patterns imply instructions to find a\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n      such that\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n      is equal to the expression involving\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":".\n\t  We\n\t\n      reject such\n      bindings; these cases are recognized by the predicate \n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"depends_on"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4.4.4#footnote-1"},{"body":"\n      On the other hand, we do not want to reject attempts\n      to bind a variable to itself.  For example, consider unifying\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list($x, $x)"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list($y, $y)"},{"body":".\n      The second attempt to bind\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n      to\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n      matches\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"(the stored value of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":")\n      against\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"(the new value of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":").\n      \n      This is taken care of by the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"equal"},{"body":"\n      clause of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unify_match"},{"body":".\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":99,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGywuIBgWGqBi6DEfRc1IahQJzEj2JidzxyguryAapqENIs4sFomzKpEaoxAYerGr+fQRuqsRWvPBI3WGQZZrGp1ziG8w1pqiaSJmqr1sLNrOLdbcdvm3zBsuOiLoYaoGDkcgFGILqer+bgnpehb2srTxJqar7+s2m6bOIAAPLQRDeqbh2a1cuFAIGftOlwYNY25youmHepaz6KG+q7rpK8xRWYMQJGEBhpzBXIFEIehiDoSgdj6e55uOxauNFdG6YZmpmfCAAyIXZhGPnGcF2SgUoNnyaJrbklSOhnteiWBcoFGlqV9nKep0F9HVpmWf4lWXqKvzFfo4gSBEVJ6H0CHCECNxnGI964eRzmrcoQJytMzovEdhbBWFV9UgB6bHU5psw7aDoskjuHo9w7t2t9-MXJjI8cM0w13gEFhGTuh6gcd-HVfQtPUfdVt3zVKUWD9cCilKGROmMPP-WaX3iH9wODtG3a+pmxtQyouMc5jjjtdrhh0YLLvW-ZP2GADtgg5W4PwgAHx3le+7Xgft0dJetKRjviCz2IqKo9PV-XoOnZdwxnA24qkxaSGmapoV5-wV200k6Iz6hXb6nMzwXWLodXapcCavWAWA-qocDAAEI55tlWjA+aIdYjtQcEKXENxmKqEHnNPaCMyHrW4GfbsoCkbwIRKAckmFsLujDqKYBXUEa-hbqAPAkJBEhkgdg6BQ9xpwNVtw-MSCq54Jrugt8FQG5YPEc3UMgY6CEIYMQliiDaHdjuiPC61gwJ8P9MjJe2lv7Q0QfDGRDDK4uVYXqF8FRbahAYA7ehdjkbPH4WAQRkIQztXBO3PYtRwTOKnqneRs8IZQ0GHY+hyNnEDSwPOUgxgGDtDILibMZAWAANegAcnNKmfQ5iDQAB0sCkAyK9DQHimD4EesEBQ+h0iZG4D0XwaEW4lIMgU0gRTjBFUydk3JpB8mFOKfoMpbgKlVJWLU+pjwmk-xaW00gHT0a8GXKY0APQ9ncAAF7rhiLUooGyRBbJkO0uqPSzn9PMYM-iwzRnECKoNKCHwGBCEMKZMg8yblU0oK0+5Oz9DgyecCA24JyDggMiwJF-FlCovBMIeE1gSlOjwBM8qUyZkjLmWUwgzTwXbI6TCo53AaYQkRcijF6KDJYsmG88EzkgA","body":"function extend_if_possible(variable, value, frame) {\n    const binding = binding_in_frame(variable, frame);\n    if (! is_undefined(binding)) {\n        return unify_match(binding_value(binding), \n                            value, frame); \n    } else if (is_variable(value)) {                 // ***\n        const binding = binding_in_frame(value, frame);\n        return ! is_undefined(binding)\n               ? unify_match(variable,\n                             binding_value(binding),\n                             frame)\n               : extend(variable, value, frame);\n    } else if (depends_on(value, variable, frame)) { // ***\n        return \"failed\";\n    } else {\n        return extend(variable, value, frame);\n    }\n} "}]},{"tag":"TEXT","id":"#p24","child":[{"body":"The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"depends_on"},{"body":"\n      is a predicate that tests whether an expression proposed to be the value\n      of a pattern variable depends on the variable. This must be done relative\n      to the current frame because the expression may contain occurrences of a\n      variable that already has a value that depends on our test variable.\n      The structure of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"depends_on"},{"body":"\n      is a simple recursive tree walk in which we substitute for the values of\n      variables whenever necessary.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":20,"eval":true,"prependLength":79,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwMwK4B2AxgC4CWA9oaOQM4D6pAhgOasCmAJgwDb2kAFMUoBbAA7UOhUgBpQpABYcmbAJSgA3llC7QAJw6l8+mvQbjm5fcLGTC00hoBkz0MuZdbEqTI0BeQIVlVVYAbiwAXxwCEgpqWkZCZlEOb3tHDW09AyMTM0YWdm4+AXTfOVAAImTUqrUI6KwQUEpxDn1meMJVACNeDnlxfFJQZkIuUE5SZrBcfTFQYkVmcVIO0ABmUEE6DjIqGk20Y821GKIDhOY6OkpiQQBrDgBPeUMRfS46LJ09Q2MpkSDEI+F4vEEH0oXx+fxy8IA-KAiFwOLhyA4uHD4XoAFygDgAR3wzAhzze7g4nkEHi8UJhakZ2JxoCRtMh+2h33OLJy+Judwe5PkLHIEPp3IaUQucUOoFEzGefQGgl+OREhDoo1491Jyo4oH8oH4WsEVQAVCx+hxzfUIjlYlcaDrKI98OInq8GABGeTkhgAJjVLI1WtAdHwvStA0NY1u909Lx9IqsEJ1xD10Y4jPtLPIuB25hRaIx3F2kazjK0zJZAPyyImJcxuZxkQJvD21d56uoYYlsYFCf9AZTYvLUeY1pzNZxdaBRcb6MxHM+XB53e7SOLS+4M43unxovFnK+Ut50RyF70ju6tE1HSE-t9oGH8gAbqT8NmuyHe6MIxO1oDvGQpes+R6COmmaTgM068vmhaMNupZeABlbBhueykKoY5Qbw+qyHu+66JY1iQWUT5DFYNivqAH68F+jKEcRLEKKmkG6vh6FniybYcB2BrZPuoajP2RqDqBSYjmxY5oTB2Y8RuCGCAuqI7nSJ5rhhLFYThEJydazGsRupE2KZiaBu+n7ZqO+kVvJjKKd2fECT+rG6RBEpWQx2Yts5e5XrogWgDecpcPQlikMsgiiNpORzjQoiGkEVQum64hVEROJIml7pZfC+JJYERpVBiez6KQmXGUiZUPvlfIEvoCw2KI8hVEQjyEJQADuNBtB0XRygAtENbHWna2LBQloDhXQkXLI0OAia07SdN0+qxgqSpZqqETLdMsb9Wthz6mauUZVKy3DKMRpHYN1CnaV94VRNeCXLeW0qL0GLhYQrCCB++jkPJ3mMW5uSAjQ5mA8Dhl0dZUrRKFCTfRMGKsAwMPyYIqO-aw2nTeyuPo4jb2yijP3o5j1k45Tf0E3kQIQcT9OLcjNAsxjGIMPMKRpFjcO86kDOQ3GgoA8wQMgyFnTC2z71yhwAAe6wTBLUtw-RX7yEL35Cbo03mZ9DCc+rsMDKDNky3zpNk06M0cO0EyMNQgjK+Ihi3IcVkaxb1vC+D7MKIYKjdaSjxu3FejKeYAsqgp4PwQWbvEqSZvSwn+ssdNpD6F+fnnu2nZZ8Ry29LGnMMNzutuzrsu+fV8WMwUDDIcuvTrsZ2UhaSeyNxuh4hwwYe8BHlda2kHdOeeAVF4J9XTeY5nfv3iLBxwofhzSVJeAnAA+e-r5vo+CBBCmrw1uC9xwBd6MFU3N0fw9b+7nt0IctuWPoewMMSHRJm+DovRKB7EEAAcgFA+QQXd9wAB0sB5xVKsJ2PBSCUB5tCUQghQTgnkBSF4jku5gLaoA-QwC9gTS-j-P++gAFAJAWkCBtwoEwI3PAxBaRkHSFQeg3AmDBDmXwO+NQeCqJkSEaAAAXkxXQ8D4RcImEwXh-C3yiKkYQ1hxDqikPIRwV66Jv7YXGHQbqHRwEKJ4Rg-QWClZqJNEIKozAqhtV6M46oxA3FVC4PUNQYCpQtCoSoGhdCyEMPMeIFBSirE2LsWURxnjXFtQ8W1bxjItFVDtEAA","body":"function depends_on(expression, variable, frame) {\n    function tree_walk(e) {\n        if (is_variable(e)) {\n            if (equal(variable, e)) {\n                return true;\n            } else {\n                const b = binding_in_frame(e, frame);\n                return is_undefined(b)\n                       ? false\n                       : tree_walk(binding_value(b));\n            }\n        } else {\n            return is_pair(e) \n                   ? tree_walk(head(e)) || tree_walk(tail(e))\n                   : false;\n        }\n    }\n    return tree_walk(expression);\n} "}]},{"id":"#sec4.4.4.5","tag":"TITLE","body":"4.4.4.5   Maintaining the Data Base"},{"tag":"TEXT","id":"#p25","child":[{"body":"\n      One important problem in designing logic programming languages is that\n      of arranging things so that as few irrelevant\n      \n      data-base entries as\n      possible will be examined in checking a given pattern. For this purpose,\n      we will represent an assertion as a list whose head is a string that\n      represents the kind of information of the assertion.\n      \n\t  We store the assertions \n\t  in separate streams, one for each kind of information, in a table\n\t  indexed by the kind.\n\t  To fetch an assertion that may match a pattern, we\n\t  return (to be tested using\n\t  the matcher) all the stored assertions that have the same\n\t  head (the same kind of information). Cleverer\n\t  methods could also take advantage of information in the frame.\n\t  We avoid building our criteria for indexing into the program;\n\t  instead we call on predicates and selectors that embody our\n\t  criteria.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":21,"eval":true,"prependLength":70,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGyYoYD5AnIBQcTZbpSULGIz0MRkYpqjNfFJFz3PdVt3zVdtwlKdJMlAZpDF84qkx6+4xAkYQGGnMFcgUQh6GIOhKB2PoZvYmJutFGD9GW1aag28IADJztmEZjrWs7ZKBShtuYMQJqwWibNFOgquII7FBO9bKF288EjdUUXrmhbQT+la7s2-jvoUYgir8j7zGqCoAA8GCJfAZH0JitCSZ4Qa44ZBkJsg6ARVz3suOiZEkNQGHNVNnEMAmqCJuhuDkH7ge6sqMeITHahZtw2aNTnKG5p1zjRlwhffUX5tZpT2el2WGtJt0yoq-pquF7HcfxyniYMtXUVs-WqpRnB51IYwGHaMhcWzMgWHwYx9AAckt-RwO7AAdLBSAyX6NBIEQmHwBgZGCarhrYbgel8NDA59gz3dIT3jCKh2nZd0g3Y9r3fr9iWlIDwP-RDsPHkj9b5soWP49IarDt4ZdrBT7hO+4AAvdcYhDopG+jlu44T-Rs170Ah7lGvQEz-js9z5GnXeqCPhZ95TLIX3x+b1vp8xufFohchwQMlhr-45Q7-BYR4WsH2nTwAviGd-Ni4YNey8PoQKOx8p7t30GfUAPQL7givjfR+D8DLP0mCvcEzkgA","body":"function fetch_assertions(pattern, frame) {\n    return get_indexed_assertions(pattern);\n}\nfunction get_indexed_assertions(pattern) {\n    return get_stream(index_key_of(pattern), \"assertion-stream\");\n} "},{"body":"The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"get_stream"},{"body":"\n      looks up a stream in the table and returns an empty stream if nothing is\n      stored there.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":22,"eval":true,"prependLength":55,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGyYoYD5AnIBQcTZbpSULGIz0MRkYpqjNfFJFz3PdVt3zVdtwlKdJMlAZpDF8nB51IYwGHaMhcWzMgWHwYx9AAcnNVN9HA7sAB0sFIDJiH0DQSBEJh8AYGRgmq4a2G4HpfDQna1oMxbSGW4wiqmma5tIBalpW46NrcLadtDfbDseU7iHOyhLuu0hqpg-ReGXawHu4FG0dAAAvdcYn2ooYbhhGbv0bNMbx57wdAV7+Pez7iCKrAqmmwChEMUyyHWknhAuq7yYADyp6cwXBchwQMlgpf45RZfBYR4WsNanTwH7iFm-N-oYRmgd5wgzv5+HBaR-QRdAHoxYhSXpYV+WDKVyZ6fBZygA","body":"function get_stream(key1, key2) {\n    const s = get(key1, key2);\n    return is_undefined(s) ? null : s;\n} "}]},{"tag":"TEXT","id":"#p26","child":[{"body":"\n\t  Rules are stored similarly, using the head\n\t  of the rule conclusion.  \n\t  A pattern \n\t  can match rules whose conclusions have the same head.\n\t  Thus, when fetching rules that might match a pattern\n\t  we fetch all rules whose conclusions have the same head\n\t  as the pattern.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":23,"eval":true,"prependLength":70,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGyYoYD5AnIBQcTZbpSULGIz0MRkYpqjNfFJFz3PdVt3zVdtwlKdJMlAZpDF84qkx6+4xAkYQGGnMFcgUQh6GIOhKB2PoZvYmJutFGD9GW1aag28IADJztmEZjrWs7ZKBShtuYMQJqwWibNFOgquII7FBO9bKF288EjdUUXrmhbQT+la7s2-jvoUYgir8j7zGqCoAA8GCJfAZH0JitCSZ4Qa44ZBkJsg6ARVz3suOiZEkNQGFIDJiEMAmqCJuhuDkH7ge6sqMeITHahZtmOcp4mJrRlwhffUX5tZjhJa5qmBc4t0yoq-pquF7HcfxqXqYM5XiFsnWqpRnB51IYwGHaMhcWzMgWHwYx9AAcnNVN9HA7sAB0sDN-QNBIEQmHwBgZGCarhrYbgel8ND-c9gyXdIN3jCK237cd0hndd93fu9txff90Mg5DsP1vmygo5j0hqsO3hl2sRPuBb7gAC91xiIOihriP6+j2P9GzDvQF7uUK9ANP+IzrPkadd6oI+BghEMUyyC9oe64bsfMcnxaIXIcEDJYc-+OUK-wWEeFrE9p08Fz4gHfzAuGEX4vd8IcP99Hk3fQR9QA9BPuCM+F9b43wMvfSY89wTOSAA","body":"function fetch_rules(pattern, frame) {\n    return get_indexed_rules(pattern);\n}\nfunction get_indexed_rules(pattern) {\n    return get_stream(index_key_of(pattern), \"rule-stream\");\n} "}]},{"tag":"TEXT","id":"#p27","child":[{"body":"The function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_rule_or_assertion"},{"body":"\n      is used by\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"query_driver_loop"},{"body":"\n      to add assertions and rules to the data base.  Each item is stored in the\n      index.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":24,"eval":true,"prependLength":288,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUAzAVwDsBjAFwEsB7YgZwICdqBbCGeJVNARjQCYcRMlVqhKdAPrkAhgHM5AUwAmkgDYTyAClKsADrUXFyAGlDkAFounyAlKADeWUC9CNF5Qo2LipemZSMOvqGxvYAZOGgVjLKwSwGxEbk9gC86eZWNnIA3FgAvkIkFDQ+EuqU5IqMMmrxicn2Tq5uHl5lUrIKKhV02roJoaagAEQaVTVqI7Z5hcIlYuPVtZIAbrWEivVDTS3Oru6e3tGKsVqylHUDDWEzBUUipaAsMgDW1kuTWutqm037LkO7VAGj6WjGlWWUzMPz+sweCw6kmIMhYW2uO0cANaRyRXSUqlB-RCSWMZhGKLR03hWHmoh8L3eyNRWzoAE8WAAjahqf4tIHHIngymKEZmdlcnl3Qq04r00AS7lqSTUfDMtHbUkpLH8trHGJxC5XEmNaUI+XlGR0OiUOTENHGTWNHUHPV4+QE3rEwZa8lWm12h3kan3OlPf22+3JSSKnlOsIuwFuk5nI1aA3nALGn2m2xmsNiCOB6Ow6yKAAeenc1tK8e1zVduJThqzmcudbzZtljzE5WUilIahkNXpHcTOOB5XxPSFGN9o109Fkxkk-cHw5k9OmoAAPjvsS1XFOPTPNHXyetGJQZJy1NY10OR6Vt3uD4ffNlPbOTWTRgXiKuA6Ppuz5dv+oAPhu9IxhySpjg2SZNrGyqquqWwZmmc65vC4GQU+tBrBsZaVtWNq0PB2ICj4GGtphP4pHmNLgYy1iLn0MgrnhIHkSKMJEZIFZVooNa0HyjbAkKIxscu5CAeu+HEGKoC8aApYCSRwlkcQYFyk85RDlyygyOpQkicQFG6k2x7dISZ5Yb+YyopyRkmaRoE4bpixOS5-g1GiEwwZKah0BZ4nHC8ehaMhKpqipNHtvZDH5p5PgGc5xncsobKhYhwLxXUdE5rcOk9gybwfN5xmCW55G+SyEx0GYmVsmJuWCmejmGVVGlmUpdX+dUjWgM1JWIh+-5ycBo6JU0ACQeyWZOnQnrZYKJeSE1cVuyWlQQKWTVBpRoTlE7tX0kjuPg56gDwO1jZtQGHQR-UeINJ1USCmgXYoV3raA-B3fKD3ydxAHNe9yZEt9v30WYADMgNPMDyrkNQkjSRxskPhDTYsejtDsZxj0KVob7vq4yNPQBIodiYZPk885XqJVrmabW9MMxT+1bUdL0NbTHOc3tpUHQpkjgzNjH3N2Y3lFRMayFUQY5R91lfnZsOjPL7FK8kIZzClp0AdVbPkTNiYfflHajRaUiLsolSlLUONLZ+p5rZrUm0A79IrCbvX2K+QsftOq3ejcwxe8QPtO8qOuKEG+sy-K9uO7QKxCQ7pCbui9GtR9UOXddt0ebtqe+8qbGKAAjpsjrmwhBdfUXf0A6XY3l7Hki1BMKJUKsudFfWAJN+dLeawjTGG+UdA13XpCsuQLDD2F7o2V6UVL5Hs+10YC9J+BO-z9Y8dBiFfTL7sLgj8mVsXwx7dA4E52n8km-L3Q+e36ccT35-j9PGrLJV+xhz5b0-hbZMaY-6I17FIBOehyBshjHPPei8P5fyslIYghA1B1BgQAuBzMX6KwTm-GBkCsHIlwQVVsMCbZ6SkLeagpBXgu2OGrd24chjkmYawg+hs+GvHFtQLK7DqI-zbNmCOUsDa7TxkIzeOcgytSNp9MEIwhFKRASkKeu1yjUD0MsVGjB8ZckoH3WsDd5quEosmcoJBhzIMMcY6gpiBicgsaDMcQchblE8SiRgzijEjjcWYgJ3iZqEKRI4oJKoQmbjCR4rx0086OBsdfRaHDlrr2-EPcksTgmuPcawCJ21okfgiXElxoSSnmMsWbNJDgMmgDsVQ0OG8-qaK8dUhJJjwkpPcqGQ2NTEmmOQuI9Rslx75JurAnw+Bn6yVGdHSZhcfrXTbsM3as97bxOWKshubSJLNw2X9Se0tmJMxkHoPQGhs6jgmv7LSZhhxyEIEGVmZkIEITUZJG5dzKAPOfHTYOh4nk9ReaAN5HzozPNKP-S5Iy+lJNKYMgiqNu63PuZEpp2JpKgFGSY0AqRCUovGbBOMUTjnZMkIU-ZtSBkNPMjNQWoAAD8jMmQApxaOPGNMiVuNsKCsFoqWhCkWYwc6Ky4iS1sGygAXFy6wPKgXeP5SyLQgrGDCrZWKw8EqlkMo4rKvOIr9UWpcLs72xrDl51keaRhWLAXAsaUPTBrsOl5Ijn6bFarynbPuvteFbqZGULypIwqMj5nQsYHIL5WkQpHNXs2KRaa5V6NllIRguCtj+mqPSVRqscnqzBPmxg9JyQ5rvAIsutBByEC0loatihdiW0ja2FtjFQAynAi2kRYiu3jmLdQvBaa0xdrzGyzl-y1AAHcZBsk6Dm0U8rg5KqthO3NnYaR4CJUdWQt5FBmD0IQcg0Lo6gCUOQXAYB8DMDYKQCwNyJigDhqAKKA55RwzQD+hGjrCzWhYVod4bIzDuF0IwZQPyaVIhwWOiDbjoNrqFpykg-ZFlJGUIq0Ac9nagbMBmDMiGoOfyncHTlxGBxIc-jh-0wGCPmE7dR0jDrk5PDxoeu8WhVEErUCwlYXHFAkqmeCAAVEJsTIYWjgX49QV4hBIqgckDwMwymAbjhaASughBORCZE-R0gIHFDINU0x9s-Hs4oxvHeKWDNKD4A-Q46OP0LEqCirpoTeZNPkw+uh1zWG8gM3yLh4KwnfkMwJSR5QBmgNGfU2YaBnmbOtruGCkd-nMPueiyhy1aGXNZew5alwSqJ0seUGl8mhQWjVa5vo+gBbjOmbUyZyQ-A+K-FbT5lw2nktHti3QBjrWzNpks4JlLdnyYOac1ITLbnf59ds6ohms9ZKjYE9Zo95riv+ECFoIUymzO7aCAl1SRE8zbeKy0dbVmbBHp3fTELigwvdcPFF8rA2hvIPa+Z-Bi3UtBeDtNrQzmMPzebeV7zEXg6rZsO2HTemUuXau6AY7Wg0endLMK37HnEf3cm0LJ7L3odC1h2VyDygOtwj1bV98tOe3YlwhIfw5An1aBYMtlNbB0ikrGNQeTimRh6tcDO-nCm9DC5K88ElGQRgWNnhWoX+rOXy4LZL0ASrqjMCCCwApxBXjEGoHOnw+6xAAFozdMaPdJ1w9OPoOzoCzp9NICWm4Avp0lnGUs8byAS69Im3d3e43zgXegQwEtPee0lgehPglV4ru47HewufLJIZTqp0ebl7m27+ZwWfZ5yAzpPPhr0K3cKiJrZnQMad+dpkT17K8tbZFsrJMSCvg4gZy+DagNcKkzfKPobiVXWgLUdCxkgLH9nLFocthbxwEtAyJyfFY0+tYz7P0olWesE3PaQLw7gVwb4In0cv3P1dXo8GX04LAmt+hHxW0oZuT-X5ty4SPt-RhH+IE-8gp+xT0zRy-zMB4xJQAD5QA99GAD9ZIv8r9UQHVD4TFrB+1x9l9p8h1a8d9Ucs9qgfBSVFwG0m0u1Adt8lxQBF9SU0DV9nErp89cCt8ICsDIDoCLpc04DudWkLVS9n8K9GMRgW0f8-8GD38+CBCeCWB-8GY0cW1gC0hwDmDox+1xC2NwJ8APAn1u5796QQo6DvAzB70WQi1kxS80Cegv8dCcDvAY0TCU8zCtCEVM9yBs9h1jDL9xCQcU9qCYpHDs878Fd6RBCX8GExA1DWcLBWC7wLCnDcD9C-IutfkPobCp8egW0oiC9A15QkiKwUjc00j6CXCmxuDf9r8PCp8vCM9dDtIq1c1AjUQk5i9oVlBVB+0wkv8Z97DRICjXYW12j-DN9ODUNGjmjc1ejR9RI6MmjNC+jyIv8Y1YhVA2jZjxxB93ApixiAJUCU9RiH9RISC1ERh5MRgKl5iIitgMDsQVjkC2DNip9m1t09iPoDjXgjjpZfJZ5JBd44kB5GBuRZ4tAAByWfLQFHcmAAHSwB6IBSMFUExXwDcRv27zMDA1ABam831X+IvGqF+NXTyDeOsE+OQW+OxIBKBJBPfHBMhNuWhOkDRjhMYBvzR0IBhGx2RMZLMAAC8LsXBwTDwoTo4aTJA6Sb9VgkSOTOwrsMTRgiTqBZ4QxaQjUOI6A51qgSSqT+TYT4StByxRTRMRgZAlJNEDTSADTlBphbB-i7g8A8SPjNgvisSZSthAS1SYTaTNTtSUSzB-kDTOQjSTSzTJSRhqQgA","body":"function add_rule_or_assertion(assertion) {\n    return is_rule(assertion) \n           ? add_rule(assertion)\n           : add_assertion(assertion);\n}\nfunction add_assertion(assertion) {\n    store_assertion_in_index(assertion);\n    return \"ok\";\n}\nfunction add_rule(rule) {\n    store_rule_in_index(rule);\n    return \"ok\";\n} "}]},{"tag":"TEXT","id":"#p28","child":[{"body":"  \n      To actually store an assertion or a rule, we store it in the appropriate stream.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":25,"eval":true,"prependLength":258,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGzRWYMQJGEBhpzBXIFEIehiDoSgdj6e4xHYmJ3PdVIYP0OqGpqZrwgAMhG2YRgGxrhtkoFKDa8rfOKpMerScgFGIfrFEGprKE688EjdMryAq2pqtBLb6umlr+LodbiCKvzaNK98AA8GCJfAZH0JitCSZ4Dq44ZBl+sg6ARVysGe8wYoYD5AnWnE2W6UlCxiM9DEZGKkYzXxSRc7q3wqNV23CUp0kyUBmkMJbpFAaH3np+QlCgOBEGQdA8TQYllro0UQT+zpLp2mbcMJ1Jysq86ZymoaboE6hBbYR6ocuOiBaswcEM22XdoB2I3M4t1gf0bddeGp0nrVmywuIc6lf0bX9u6mrksVzXwWI1dSLOXmbduO27o2oxfAUFh8DYZ2jbRC7wSDh7uEMUPw8j2mGepZOI4YL61uD829rRwHjbmU2I2F67+StkrzFFc1qDEOgNua8u5ajw7kglk6pdd-ODLrhum+Uy3Verlx+8b3a4czrJ87boGS+3E2ze2iu0KW9Px8HhhtYYYhXsIQI3GcFu9cL7ql7L5ertbyu-Zr1IKmUNhyBy+gT9Fw329WyWzp7le5YMsWIQgFH7P1fnQeEoAAA+UCpLHVOlVP+19doGVzKQagDoGCgJfglCB4QYFwM7gg6WtV-4oP4gzLBJgwG4JViPFa2DwFTzDhHd+BcxbRwziwwcOd45DAXmXWet906MNwdvEiu996H0MMfWeZ9OEX1tFfEWe1b70LorbBgQDmpUKfjg1E+h45e3zJIg+xAj70Dnm6V24JtEgOofo5wntQBGJzBIveZiLHgzTtbe+1V1osGEOQUx0jZFkI-oUcW7Vu4XV7vxZ+YcgkhPMTI+gKt04JMCcE+cFANp-WYSnQwbCrEuBuNiJO3Ds4yFzlwCagxlGr2HhkgJSTw7CF8MU+RX9FFZAaTfYe6j-Z3EyUkjxoS345Pun9Qw3A2m+BKcCWOIzgljJSU47gky8lkBmaAOZAz06ikoaIgxciIgAEhCify4vAmJMtwnyyOQ48B6TfEuEeXophfDTlXOsaCBggRvpxLxE0159NXm6JocFTZkhtmdI4V-Gq-zKhsO4PjX26d3mQtynMuFPyY4fCRYC+53AdAgtHmC0eEKmD4C0UaZgOjQG4siZwzRdiIWOLfppBM4Ljm5S+fc6wYExyaOWckrx+guUNExRyxg0LpnFKFeBClSZ2VMJxUI-ZoLRTuThswLQg8mVdU4Tc3+sTiX8R1R8KgxBB4vPJTq1Z4rvmxHPgI20QifHktFG8BiqIhbOpdcaohtzSHIOaoA+gvrnA-EdakvB0DYGhhNYgs1Yb5Y+sVtGwcVr9W7TtStDNfrBxmIYtyLQhqi74sAgClFoBgXr1BYWrNtKUztF2hWl2fya1xLRecdOTb6A-E6H9O6NBsw6wFWjTtBLu3mtJZ6laopjBtscJtD4Ch2HLCiT-FNM513y2XfmVd+a6KHqasoO2OabW7SKfu-WoAt0KLdfeSgG7hGgqqKQAlV6DX7rCFOp9Iw-1kpWofQCP6b1GFfZQf9f5urbmAw2r1qQbWaFxGe1dUGN2wcfV-UUFMX3YZA3zVIz9v16uvc3YDAG8OpAI6XZC0GJgLpIwwdgHgvAVsrd-Lupq7lpoMux5QXgT02SE14Nj+B2lcddSMPpetiNDLtuJqD1rB4LJseJ5xEHhosdKqkeKlBgi0rDtUXBcKLkG2ZbRsUd1SC4kM8ZuqLAzMnMnQQpNqQXN2Yc9lKgTnFDefM7PJDi7Ww+ezn5ozpATNBbc2m54lmYh4p48QpBKiDIOBfr5qy0XYuuacYpvxQX7ORdywF0zo6wkJciElh91nrnBr46GjL-ESs5aChVuLhXQt0UczFipKcZOcMRbOgTdaitvKggS+KIhhsIq7cintk2ew+rKxQObAajULZnUtudmryWaI0IQEEZbj6UNjc4bgL8xC8C3pdo0GnY7HdO7QxV3YLtSLWfQa7pBbv3a+14sIenzD9fy1VxKRmGAveoGdt+W2VB0qyuV0gjIweDdYSFlLb5svrf8zF5zBX4cCqkqUI7hATuw-M5ovh-XBWSqVa7T9M2-ObYFZMKSzRyeU7h3QViAcan6Dp+9pVBomfTcArNwYs8Rei+7MYNbUvilqIOakGHvOO1Buic12t4J1e0JW59zxcbNfdOfcr3rNkbtirjUUrbsn6mX0Eezg7YX-kZE2uaVMzgFnJpIfoL3SkrsWo96J8wbwn68BN6QD3AMHcMf2LHiGVdQMe8k9JmPHBfd0YyL0p3tpM-7lJ4smceu2CmXIL4CWMeHp+hWM0HpCfshJ9d6e6LdtA-BWqAwaoFRXoB7cN7yxhczzdEZL3veH1MxfQH4pVE6EzzKESIEHRnfcrw36DxBn4hewb8Rt0Pug+g-0FsnvhQRVCgZRxIfufzhT+UARuf2X44oKz6H3QbgTxAQAD4VDL8nmvolGfu+uSh8MEHbIXj3owBPv3oXvtOlFQCOoyBHquNHrHi5KPn4OPm9FPg5t9KDP9BgUjkvqQCvtWmnmfoyNvrDGftfiHhwPfo-hfrEFfgfvQcQIwZvp7CGH1IXp-uEACL-iQWQe7hwLqo-mojksYAwG2qVuOqQOHMYPoAAOSd76By4GgAA6WAheAeFOTUVUUOMgwQCghiue3APQ8yco4EyhqCZAihteJwUhdsshuI8hDhKhahGhKw2huhx2Bh1KDAxhpAphfUvAy4gqoAPQYR3AAAXuuDENoUUP4SIIEcEaYdmBYXEWhBobYfxO4fgMYEVFDBLtDu8KZGQJ4foakUYSYfoK9FkSXmCHrs4uCCwK0coK0cIPCNYMoU6HgM4TIfmHIfYYUZtKodUYYTSukfUY0TYuQK0e0YAl0T0XkeCM5EAA","body":"function store_assertion_in_index(assertion) {\n    const key = index_key_of(assertion);\n    const current_assertion_stream =\n                get_stream(key, \"assertion-stream\");\n    put(key, \"assertion-stream\",\n        pair(assertion, () => current_assertion_stream));\n}\nfunction store_rule_in_index(rule) {\n    const pattern = conclusion(rule);\n    const key = index_key_of(pattern);\n    const current_rule_stream = \n                get_stream(key, \"rule-stream\");\n    put(key, \"rule-stream\",\n        pair(rule, () => current_rule_stream));\n} "}]},{"tag":"TEXT","id":"#p29","child":[{"body":"\n\t  The key under which a pattern\n\t  (an assertion or rule conclusion)\n\t  is stored in the table is the\n\tstring it starts with.\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":26,"eval":true,"prependLength":9,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwMwK4B2AxgC4CWA9oaOQM4D6pAhgOasCmAJgwDb2kAFMUoBbAA7UOhUgBpQpABYcmbAJSgA3llC7QAJw6l8+mvQbjm5fcLGTC00hoBkz0MuZdbEqTI0BeQIVlVVYAbiwAXxwCEgpqWkZCZlEOb3tHDW09AyMTM0YWdm4+AXTfOVAAImTUqrUI6LwiMiozQi4OAA8GAGsOAE8GSlxBS1JSDlMs3ONTdw5PMeYJqcIG0CbLfToVAEd8KaGANymAI0pdwQByZjpd-SEc55fX54AdLH18XjTmcXE0h4pEoDFwlH0okEhB+vHkA3haiRbze13kVVO+guu3qEW2uwYByODEx2LSt3uUyeKJpr0+31+gn+gI6TFB4Mhy2sgnw8mOanh8ks3N5oAAXkj5KBPs9mUC2WCIVDjoLxUiNLTXmjqqTLhxcTFrHRSAxmIQ6AB3KY3OWskGKzldVX8Y2CKrMKros6e6rEH1VLj1NTXBpYECgfH7Q76E7nPU2gHy+0cqFO0AI0AuoTu-3e9F+9GBpHaqq4oA","body":"function index_key_of(pattern) { return head(pattern); } "}]},{"id":"#sec4.4.4.6","tag":"TITLE","body":"4.4.4.6   Stream Operations"},{"tag":"TEXT","id":"#p30","child":[{"body":"\n      The query system uses a few stream operations that were not presented\n      in chapter 3.\n    ","tag":"#text"}]},{"tag":"TEXT","id":"#p31","child":[{"body":"The functions\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_append_delayed"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"interleave_delayed"},{"body":"\n      are just like\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_append"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"interleave"},{"body":"\n      (section ","tag":"#text"},{"tag":"REF","body":"3.5.3","href":"/sicpjs/3.5.3"},{"body":"),\n      except that they take a delayed argument (like the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"integral"},{"body":"function\n      in section ","tag":"#text"},{"tag":"REF","body":"3.5.4","href":"/sicpjs/3.5.4"},{"body":").\n      This postpones looping in some cases (see\n      exercise ","tag":"#text"},{"tag":"REF","body":"4.68","href":"/sicpjs/4.4.4#ex-4.68"},{"body":").\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":27,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwMwK4B2AxgC4CWA9oaAM6kBOApgIYC2A+iwA7dOEATDgKYAbFgE8mAgBS0AjABpQI8VKG0ATAEpQAbyygjoZqXwMa5Wh0L5RoufO2Hjr4wH4VYydI5aZzm5BAFyg3CzkDDIAFqyyCtqKLkEpxgGgALwAfHSMrJw8fILC3upyeewcpBEOCUmpDY1Nqao+GjraANxYAL54RGRUloSkTAyirABuTCVq0o7Krep+OvrJJkxmFqBWNna1Tuspnku+-oGNoeGRMXGOiUfNoOnZOyNjEyzTs20yp+0BepPYEgl45ejMSrVcgHbRw7p9LDhBi0GYAR3wYwkHGmDAARpRUTIAOQsWiohikGQg5oAHSwDDsTBkhX4QlIlA4uEoDDYMls9mUEiFcN0IOJygARLiCajJV0kSwUejMQxsTLCczSeSxlSaU16YyJizeGyqpzubyZNcovhlJNEqBhWEIrblAAvOHKUD0tys4ocrk8vmTIUe0X6owS0DSsaypjy7p4SL0LiEWgAdzGJP97ItwZkAA8w6BRFYqZKWJKpXjqzHiHXJQJ5dpiQqQC7lRwMVicXHNTnTQH81bi07lGX6DJK43a1KG1Lm3Do5LE0A","body":"function stream_append_delayed(s1, delayed_s2) {\n    return is_null(s1)\n           ? delayed_s2()\n           : pair(head(s1),\n                  () => stream_append_delayed(stream_tail(s1),\n                                              delayed_s2));\n}\nfunction interleave_delayed(s1, delayed_s2) {\n    return is_null(s1)\n           ? delayed_s2()\n           : pair(head(s1),\n                  () => interleave_delayed(delayed_s2(),\n                                           () => stream_tail(s1)));\n} "}]},{"tag":"TEXT","id":"#p32","child":[{"body":"The function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_flatmap"},{"body":",\n      which is used throughout the query evaluator to map a\n      function\n      over a stream of frames and combine the resulting streams of frames,\n      is the stream analog of the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"flatmap"},{"body":"function\n      introduced for ordinary lists in\n      section ","tag":"#text"},{"tag":"REF","body":"2.2.3","href":"/sicpjs/2.2.3"},{"body":". Unlike ordinary\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"flatmap"},{"body":", however, we accumulate the streams\n      with an interleaving process, rather than simply appending them (see\n      exercises ","tag":"#text"},{"tag":"REF","body":"4.69","href":"/sicpjs/4.4.4#ex-4.69"},{"body":"\n      and ","tag":"#text"},{"tag":"REF","body":"4.70","href":"/sicpjs/4.4.4#ex-4.70"},{"body":").\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":28,"eval":true,"prependLength":16,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwMwK4B2AxgC4CWA9oaAM6kBOApgIYC2A+iwA7dOEATDgKYAbFgE8mAgBS0AjABpQI8VKG0ATAEpQAbyygjoZqXwMa5Wh0L5RoufO2Hjr4wH4VYydI5aZzm5BAFyg3CzkDDIAFqyyCtqKLkEpxgGgALwAfHSMrJw8fILC3upyeewcpBEOCUmpDY1Nqao+GjraANxYAL54RGRUloSkTAyirABuTCVq0o7Krep+OvrJJkxmFqBWNna1Tuspnku+-oGNoeGRMXGOiUfNoOnZOyNjEyzTs20yp+0BepPYEgl45ejMSrVcgHbRw7p9fokCjUXKQzi4cSkNg8GQEQjKWi6AyuUzmGiYlikUaEPwVNjldEcHHcPFEQnw3pIwaoynU-h09GM-LE9Zk7a7Wz2YXsC4NTxS0SPNyhcjvcZTGb-GTKxqxFjxekPEFGMGgPk0wX5GWcaG1I2cxHhBi0GYAR3wYwkHGmDAARpRXTIAOQsWiuhikGQmpoAHSwDDsTBkhX4QlIlA4uEoDAZiuUEgLcN0IODygARL6A67y10sM7XRwPV6fWNq8nQ+GxlGY4144mJineGmqpns7mZNcovhlJNEqBC2EItPlAAvOHKUDxtyp4oZrM5hmTAtr4u90Bl0CVtuBpi17p4SL0LiEWgAdzGId36bHh5kAA8T1AUQrCjcsWHLCs-Ugq9iBg8sBFrbRgzrEAlxdd1PQYb0q1vL9hz3X8J0AhdlBA+gZHA+DoIrOCK0QuFL3Le8gA","body":"function stream_flatmap(fun, s) {\n    return flatten_stream(stream_map(fun, s));\n}\nfunction flatten_stream(stream) {\n    return is_null(stream)\n           ? null\n           : interleave_delayed(\n                 head(stream),\n                 () => flatten_stream(stream_tail(stream)));\n} "}]},{"tag":"TEXT","id":"#p33","child":[{"body":"\n      The evaluator also uses the following simple\n      function\n      to generate a stream consisting of a single element:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":29,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwMwK4B2AxgC4CWA9oaAM7mEDmANgKanUD6tpATqwEMAtgAoAHgEpQAbyyh5ofqXy8aABwHle4gDSgRUgLwA+UIXzNmEgNxYAvjg29arTgEd8rXgE9OANy8AI0oXEQByAVoXXlIRBXiExKT5AB0sXgtWEQE1NVZCABNODk5cSl5Rc0s9bxqJeuTksL0AIgDeYJcWmywnF3dPH38gkKyIqK9YxunktIy2bNz8opKyipENLRF8PT8JGr1N7R3QAC96vVA0hJy8wuLKUvLRPwOz+qkZpObQNpGunp4LQ8TgCQi0ADuXnCt2WDye6zEb2Y5B4IhaAharUCWN+xFxLQK3QkYR6IFAfVcHi8vnanTGsPuq2eulAtVAKLRGIJONa+NaRPqPxa3WsQA","body":"function singleton_stream(x) {\n    return pair(x, () => null);\n} "}]},{"id":"#sec4.4.4.7","tag":"TITLE","body":"4.4.4.7   \n      Query \n      "},{"tag":"TEXT","id":"#p34","child":[{"body":"\n\t  We saw in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.1","href":"/sicpjs/4.4.4#subsubsection_1"},{"body":" that \n\t  the driver loop first transforms an input string into the JavaScript\n\t  syntax representation.\n\t  The input is designed to look like a\n\t  JavaScript expression, so that we can use the\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" function \n\t  from section ","tag":"#text"},{"tag":"REF","body":"4.1.2","href":"/sicpjs/4.1.2"},{"body":" and\n\t  also to support JavaScript notation in\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":".\n\t  For example, \n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":30,"eval":false,"body":"parse('job($x, list(\"computer\", \"wizard\"));');"},{"body":"\n\t  yields\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":31,"eval":false,"output":"list(\"application\",\n     list(\"name\", \"job\"),\n     list(list(\"name\", \"$x\"),\n          list(\"application\",\n               list(\"name\", \"list\"),\n               list(list(\"literal\", \"computer\"),\n                    list(\"literal\", \"wizard\")))))"},{"body":"\n\t  The tag\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"application\""},{"body":" indicates that\n\t  syntactically,\n\t  the query would be treated as a function application in JavaScipt.\n\t  The function\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":" transforms the syntax\n\t  back into a string:\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":32,"eval":false,"body":"unparse(parse('job($x, list(\"computer\", \"wizard\"));'));","output":"'job($x, list(\"computer\", \"wizard\"))'"},{"body":"\n\t  In the query processor, we assumed a\n\t  \n\t      query-language-specific\n\t    \n\t  representation of assertions, rules, and queries.\n\t  The function\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"convert_to_query_syntax"},{"body":"\n\t  transforms the syntax representation into that representation. \n\t  Using the same example,\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":33,"eval":false,"body":"convert_to_query_syntax(parse('job($x, list(\"computer\", \"wizard\"));'));"},{"body":"\n\t  yields\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":34,"eval":false,"output":"list(\"job\", list(\"name\", \"$x\"), list(\"computer\", \"wizard\"))"},{"body":"\n\t  Query-system functions such as\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"add_rule_or_assertion"},{"body":"\n\t  in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.5","href":"/sicpjs/4.4.4#subsubsection_5"},{"body":"\n\t  and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_query"},{"body":"\n\t  in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.2","href":"/sicpjs/4.4.4#subsubsection_2"},{"body":"\n\t  operate on the query-language-specific representation using \n\t  selectors and predicates such as \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"type"},{"body":",\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"contents"},{"body":", \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_rule"},{"body":", and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"first_conjunct"},{"body":" declared below.\t  \n\t  Figure ","tag":"#text"},{"tag":"REF","body":"4.8","href":"/sicpjs/4.4.4#fig-4.8"},{"body":" depicts the three\n\t  \n\t  abstraction barriers used by the query system and how the transformation functions\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":",\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":", and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"convert_to_query_syntax"},{"body":" bridge them.\n          ","tag":"#text"},{"tag":"FIGURE","scale":"80%","src":"img_javascript/ch4-syntax-abstraction-logic-programming.svg","id":"#fig-4.8","captionHref":"/sicpjs/4.4.4#fig-4.8","captionName":"Figure 4.8 ","captionBody":[{"body":"Syntax abstraction in the query system.","tag":"#text"}]}]},{"tag":"SUBHEADING","id":"#h11","child":[{"body":"Handling pattern variables","tag":"#text"}]},{"tag":"TEXT","id":"#p35","child":[{"body":"\n\tThe predicate\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_variable"},{"body":" is used on the \n\tquery-language-specific representation during query processing and\n\ton the JavaScript syntax representation during instantiation\n\tto identify names that start with a dollar sign.\n\t\n\tWe assume there is a function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"char_at"},{"body":" that\n\treturns a string containing only the character of the given string\n\tat the given position.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4.4.4#footnote-2"},{"tag":"SNIPPET","latex":false,"id":35,"eval":false,"body":"function is_variable(exp) {\n    return is_name(exp) && char_at(symbol_of_name(exp), 0) === \"$\";\n}"}]},{"tag":"TEXT","id":"#p36","child":[{"body":"\n          Unique variables are constructed during rule application\n          (in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.4","href":"/sicpjs/4.4.4#subsubsection_4"},{"body":") by means of the\n          following functions. \n          The unique identifier for a rule application is a number, which is\n          incremented each time a rule is applied.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/4.4.4#footnote-3"},{"tag":"SNIPPET","latex":false,"id":36,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwGwKYAuoATgK4ED6AxgPZkB2h+JoAvKAAwDcOAZo2qEAlrQagG+AO6VyVAIYAHRbmHV5IsZWEATABQBKUAG8soc6Qr4a9Ji3aWqdRs1YBqUAEZeF0kTIk4nLWznYkvAC+WAIMQqLiALbyANbWkjIAbvIkwvIARgR6WTn5BAA0jtZKKmoa8do6Rqa+JP6BoEmplAzyCfh6AM4Angl5tLiUtHzdvf3FuQX4Rh4ARJQroG5mvju7OwOEOQwA5sJ8Q3rBlNWq6poMDQYGkUA","body":"let rule_counter = 0;\n\nfunction new_rule_application_id() {\n    rule_counter = rule_counter + 1;\n    return rule_counter;\n}\nfunction make_new_variable(variable, rule_application_id) {\n    return make_name(symbol_of_name(variable) + \"_\" +\n                     stringify(rule_application_id));\n} "}]},{"tag":"SUBHEADING","id":"#h12","child":[{"body":"The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"convert_to_query_syntax"}]},{"tag":"TEXT","id":"#p37","child":[{"body":"\n\t  The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"convert_to_query_syntax"},{"body":"\n\t  recursively\n\t  \n\t  transforms the JavaScript syntax representation into\n\t  the query-language-specific representation by simplifying \n\t  assertions, rules, and queries such that the symbol of a name in a\n\t  function expression of an application becomes a tag, except that if \n\t  the symbol is ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"pair\""},{"body":"\n\t  or ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"list\""},{"body":", an (untagged) JavaScript pair\n\t  or list is built. This means that\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"convert_to_query_syntax"},{"body":"\n\t  interprets\n\t  applications of\n\t  the constructors ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":" and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list"},{"body":" during the transformation,\n\t  and processing functions such as\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pattern_match"},{"body":"\n\t  of section ","tag":"#text"},{"tag":"REF","body":"4.4.4.3","href":"/sicpjs/4.4.4#subsubsection_3"},{"body":" and\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unify_match"},{"body":"\n\t  of section ","tag":"#text"},{"tag":"REF","body":"4.4.4.4","href":"/sicpjs/4.4.4#subsubsection_4"},{"body":" \n\t  can operate directly on the intended pairs and\n\t  lists rather than on the syntax representation generated by the parser.\n\t  The (one-element) \"","tag":"#text"},{"body":"argument","tag":"#text"},{"body":"\" list of \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":"\n\t  remains unprocessed, as explained below.\n\t  A variable remains unchanged, and\n\t  a literal is simplified to the primitive value it contains.\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":37,"eval":true,"prependLength":186,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUAzAVwDsBjAFwEsB7YgZwICdqBbCGeJVNARjQCYcRMlVqhKdAPrkAhgHM5AUwAmkgDYTyAClKsADrUXFyAGlDkAFounyAlKADeWUC9CNF5Qo2LipemZSMOvqGxvYAZOGgVjLKwSwGxEbk9gC86eZWNnIA3FgAvkIkFDQ+EuqU5IqMMmrxicn2Tq5uHl5lUrIKKhV02roJoaagAEQaVTVqI7Z5hcIlYuPVtZIAbrWEivVDTS3Oru6e3tGKsVqylHUDDWEzBUUipaAsMgDW1kuTWutqm037LkO7VAGj6WjGlWWUzMPz+sweCw6kmIMhYW2uO0cANaRyRXSUqlB-RCSWMZhGKLR03hWHmoh8L3eyNRWzoAE8WAAjahqf4tIHHIngymKEZmdlcnl3Qq04r00AS7lqSTUfDMtHbUkpLH8trHGJxC5XEmNaUI+XlGR0OiUOTENHGTWNHUHPV4+QE3rEwZa8lWm12h3kan3OlPf22+3JSSKnlOsIuwFuk5nI1aA3nALGn2m2xmsNiCOB6Ow6yKAAeenc1tK8e1zVduJThqzmcudbzZtljzE5WUilIahkNXpHcTOOB5XxPSFGN9o109Fkxkk-cHw5k9OmoAAPjvsS1XFOPTPNHXyetGJQZJy1NY10OR6Vt3uD4ffNlPbOTWTRgXiKuA6Ppuz5dv+oAPhu9IxhySpjg2SZNrGyqquqWwZmmc65vC4GQU+tBrBsZaVtWNq0PB2ICj4GGtphP4pHmNLgYy1iLn0MgrnhIHkSKMJEZIFZVooNa0HyjbAkKIxscu5CAeu+HEGKoC8aApYCSRwlkcQYFyk85RDlyygyOpQkicQFG6k2x7dISZ5Yb+YyopyRkmaRoE4bpixOS5-g1GiEwwZKah0BZ4nHC8ehaMhKpqipNHtvZDH5p5PgGc5xncsobKhYhwLxXUdE5rcOk9gybwfN5xmCW55G+SyEx0GYmVsmJuWCmejmGVVGlmUpdX+dUjWgM1JWIh+-5ycBo6JU0ACQeyWZOnQnrZYKJeSE1cVuyWlQQKWTVBpRoTlE7tX0kjuPg56gDwO1jZtQGHQR-UeINJ1USCmgXYoV3raA-B3fKD3ydxAHNe9yZEt9v30WYADMgNPMDyrkNQkjSRxskPhDTYsejtDsZxj0KVob7vq4yNPQBIodiYZPk885XqJVrmabW9MMxT+1bUdL0NbTHOc3tpUHQpkjgzNjH3N2Y3lFRMayFUQY5R91lfnZsOjPL7FK8kIZzClp0AdVbPkTNiYfflHajRaUiLsolSlLUONLZ+p5rZrUm0A79IrCbvX2K+QsftOq3ejcwxe8QPtO8qOuKEG+sy-K9uO7QKxCQ7pCbui9GtR9UOXddt0ebtqe+8qbGKAAjpsjrmwhBdfUXf0A6XY3l7Hki1BMKJUKsudFfWAJN+dLeawjTGG+UdA13XpCsuQLDD2F7o2V6UVL5Hs+10YC9J+BO-z9Y8dBiFfTL7sLgj8mVsXwx7dA4E52n8km-L3Q+e36ccT35-j9PGrLJV+xhz5b0-hbZMaY-6I17FIBOehyBshjHPPei8P5fyslIYghA1B1BgQAuBzMX6KwTm-GBkCsHIlwQVVsMCbZ6SkLeagpBXgu2OGrd24chjkmYawg+hs+GvHFtQLK7DqI-zbNmCOUsDa7TxkIzeOcgytSNp9MEIwhFKRASkKeu1yjUD0MsVGjB8ZckoH3WsDd5quEosmcoJBhzIMMcY6gpiBicgsaDMcQchblE8SiRgzijEjjcWYgJ3iZqEKRI4oJKoQmbjCR4rx0086OBsdfRaHDlrr2-EPcksTgmuPcawCJ21okfgiXElxoSSnmMsWbNJDgMmgDsVQ0OG8-qaK8dUhJJjwkpPcqGQ2NTEmmOQuI9Rslx75JurAnw+Bn6yVGdHSZhcfrXTbsM3as97bxOWKshubSJLNw2X9Se0tmJMxkHoPQGhs6jgmv7LSZhhxyEIEGVmZkIEITUZJG5dzKAPOfHTYOh4nk9ReaAN5HzozPNKP-S5Iy+lJNKYMgiqNu63PuZEpp2JpKgFGSY0AqRCUovGbBOMUTjnZMkIU-ZtSBkNPMjNQWoAAD8jMmQApxaOPGNMiVuNsKCsFoqWhCkWYwc6Ky4iS1sGygAXFy6wPKgXeP5SyLQgrGDCrZWKw8EqlkMo4rKvOIr9UWpcLs72xrDl51keaRhWLAXAsaUPTBrsOl5Ijn6bFarynbPuvteFbqZGULypIwqMj5nQsYHIL5WkQpHNXs2KRaa5V6I7rQAejBZKYt3nE9kxgZDli0IJVqlB8CgC0JaP1rrzLltUaAAlE1kIkoVJSlCsVNUQtMlpMtlYpaHkrdW1tnaSUZBGAAKxkOsOgpAryIMkJnf1oom1tR8P4QIWgx1BVeXGhNCKB16CHS0fIoBFDBUUOOVwBKqwsM0j0N5DBSURWCMQHNea0YFuQUW2Q5ZzWWrFW8w9BNj2nsPB9XdSoJ2kpGFuxgIw9UuE5Qh9Mkj70L2tE+uNn8zBW0w4+1Qz7OzIdAEq6DPJYOjCJEhsVqHmBYdnsR3DZGlVoco2oMwhHsMsbkIiw8hRXDnsvbPcQVaa1SEvNeW8WxG03o+oJPIwmL1XscKAPAglfCfQmLUA8TddPKlLOB5TLhCgyl8rPSQP61jVG5LPLQAByf01RtBAc5gAHSwIwXBWwAVGFUJi-AbiWBaBwXgswbJIudgtY5i8dnqCzxDJZ6wNmc32a2M57DuatDuYZl5nzd4tD+ejtINGwXGChbQ4QGEwrQBRdANVswAAvPMZhQBecPCVwL5WQvfEiy1mLQG4ujHS4ltdeRaRGo4nQAA7tUJz3WyuSAq6FgD9WzD-KUpo7bpBtvKGmLYRzdw8Apes5sOJY2HPOduQF5bq2tDrYa1t3hu39uHZGyMakQA","body":"function convert_to_query_syntax(exp) {\n   if (is_application(exp)) {\n     const function_symbol = symbol_of_name(function_expression(exp));\n     if (function_symbol === \"javascript_predicate\") {\n       return pair(function_symbol, arg_expressions(exp));\n     } else {\n       const processed_args = map(convert_to_query_syntax,\n                                  arg_expressions(exp));\n       return function_symbol === \"pair\"\n              ? pair(head(processed_args), head(tail(processed_args)))\n              : function_symbol === \"list\"\n              ? processed_args\n              : pair(function_symbol, processed_args);\n     }\n   } else if (is_variable(exp)) {\n     return exp;\n   } else { // exp is literal\n     return literal_value(exp);\n   }\n} "}]},{"tag":"TEXT","id":"#p38","child":[{"body":"\n\t  An exception to this processing is\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":".\n\t  Since the instantiated JavaScript syntax\n\t  representation\n\t  of its predicate expression is passed to \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n\t  of section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":",\n\t  the original syntax representation coming from\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":"\n\t  needs to remain intact in the query-language-specific representation\n\t  of the expression.\n\t  In this example\n\t  of section ","tag":"#text"},{"tag":"REF","body":"4.4.1","href":"/sicpjs/4.4.1"},{"tag":"SNIPPET","latex":false,"id":38,"eval":false,"body":"and(salary($person, $amount), javascript_predicate($amount > 50000))"},{"tag":"JAVASCRIPTINLINE","body":"convert_to_query_syntax"},{"body":" produces a data structure\n\t  in which a JavaScript syntax representation is embedded in\n\t  a query-language-specific representation:\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":39,"eval":false,"output":"list(\"and\",\n     list(\"salary\", list(\"name\", \"$person\"), list(\"name\", \"$amount\")),\n     list(\"javascript_predicate\",\n          list(\"binary_operator_combination\",\n               \">\",\n               list(\"name\", \"$amount\"),\n               list(\"literal\", 50000))))"},{"body":"\n\t  In order to evaluate the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":" subexpression\n\t  of that processed query, the function\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":" in\n\t  section ","tag":"#text"},{"tag":"REF","body":"4.4.4.2","href":"/sicpjs/4.4.4#subsubsection_2"},{"body":" calls the function\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"instantiate_expression"},{"body":" (below)\n\t  on the embedded JavaScript syntax\n\t  representation of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$amount > 50000"},{"body":" to\n\t  replace the variable\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"name\", \"$amount\")"},{"body":" by a literal,\n\t  for example ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"literal\", 70000)"},{"body":", that represents\n\t  the primitive value to which \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$amount"},{"body":" is bound, here 70000.\n\t  The JavaScript evaluator can evaluate the instantiated predicate, which now represents\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"70000 > 50000"},{"body":". \n      ","tag":"#text"}]},{"tag":"SUBHEADING","id":"#h13","child":[{"body":"Instantiating an expression","tag":"#text"}]},{"tag":"TEXT","id":"#p39","child":[{"body":"\n\tThe function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":"\n\tof section ","tag":"#text"},{"tag":"REF","body":"4.4.4.2","href":"/sicpjs/4.4.4#subsubsection_2"},{"body":" and the driver loop\n\tof section ","tag":"#text"},{"tag":"REF","body":"4.4.4.1","href":"/sicpjs/4.4.4#subsubsection_1"},{"body":" call\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"instantiate_expression"},{"body":" on an\n\texpression to obtain a copy in which any variable in the\n\texpression is replaced by its value in a given frame.\n\tThe input and result expressions use the JavaScript syntax\n\trepresentation, so any value that results from instantiating a\n\tvariable needs to be converted from its form in the binding to\n\tthe JavaScript syntax representation.\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":40,"eval":true,"prependLength":104,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGywuIBgWGqBi6DEfRc1IahQJzEj2JidzxyguryAapqENIs4sFomzKpEaoxAYerGr+fQRuqsRWvPBI3WGQZZrGp1ziG8w1pqiaSJmqr1sLNrOLdbcdvm3zBsuOiLoYaoGDkcgFGILqer+bgnpehb2srTxJqar7+s2m6bOIAAPLQRDeqbh2a1cuFAIGftOlwYNY25youmHepaz6KG+q7rpK8xRWYMQJGEBhpzBXIFEIehiDoSgdj6e55uOxauNFdG6YZmpmfCAAyIXZhGPnGcF2SgUoNnyaJrbklSOhnteiWBcoFGlqV9nKep0F9HVpmWf4lWXqKvzFfdd5mGZxqtCYMgFH0LRSH0pGCYLXCX1FAHptdtiFsNG3QAuxk7oeoGXad-HVfQwp2rfCo1SlC6-W7UoA5iPAOHIbN-gcFh8HKZr3oZdZ3UMTTYmaBTbZoKhyoDg7Rt2vqW7m6xY8J8lMOw91hVfVJ0YD38Q3a9G66EBuHeblbo7druPbj7hq+mKe7cbx23ZdiMF7Y7vHRcvvj1APAABIAB0tEhyhKAiAPTnPyvBB4BqFGoGh8-h-Nx9R9knbHwGsTJMKh6D5yUvvLW3NUh+0eKPKSmcnZSVrsPBcCDQylDKgwDQhAQTclRBjO4ZtXrghgvCMC4Exw00NuA1MQw5hQK7mvKhFI6GQO3KPNCKCz5gCvjfO+99H7PxSK-Qg79P7UG-n1au2CQSu06FAhWoNSY22nvbcqENxHEDcM4fQWjAi6PoIfaBbpfbdVhq9AxOjDDOHTtMUobwIFgg3jPJuTt9Hg20UYugJj7ENFQQwdG1ifH+KKKUSeajN4OxCbY+gDCRixLsSY1erDrYfHUVvJJ8TtzZLoEvZGYStItC8YYuJdAibzlIMYBg7QyC4ggUXYw+gADk5p6FpINJfLApAMivVwUzKmlB8CPWCM7dImRuA9F8GhKhLSDKNPwMYIqVSal1NIA0sgTTXptLcB0zp0xum9MeAMkQTARkyDGfodGvBlxLx6Dc7gAAvdcMRulFFOUMi5VzsxTOebMtJ8z+KLOWU6QaUEPg4PeKZMgrTPnnNGTvcGfzgQG3BOQcEBkWCYv4soHF4JhDwmsC0p0eBVnlXWZs0g2y4WEBIGc4ZiLnbItAD0Gh6L8XYoMnigyhLJhAvBM5IAA","body":"function instantiate_expression(expression, frame) {\n    return is_variable(expression)\n           ? convert(instantiate_term(expression, frame))\n           : is_pair(expression)\n           ? pair(instantiate_expression(head(expression), frame), \n                  instantiate_expression(tail(expression), frame))\n           : expression;\n} "},{"body":"\n\t  The function\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"instantiate_term"},{"body":" takes\n\t  a variable, pair, or primitive value as first argument and a frame\n\t  as second argument and recursively replaces the variables in\n\t  the first argument by their values in the frame\n\t  until a primitive value or an unbound variable is reached.\n\t  When the process encounters a pair, a new pair is constructed\n\t  whose parts are the instantiated versions of the original parts.\n\t  For example, if \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n\t  is bound to the pair\n\t  ","tag":"#text"},{"body":"$[\\texttt{\\$y}, 5]$","tag":"LATEX"},{"body":"\n\t  in a frame ","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":"\n\t  as the result of unification, and \n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n\tis  in turn bound to 3,\n\tthe result of applying\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"instantiate_term"},{"body":" to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"name\", \"$x\")"},{"body":" and\n\t","tag":"#text"},{"body":"$f$","tag":"LATEX"},{"body":" is the pair\n\t ","tag":"#text"},{"body":"$[3, 5]$","tag":"LATEX"},{"body":".\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction instantiate_term(term, frame) {\n    if (is_variable(term)) {\n        const binding = binding_in_frame(term, frame);\n        return is_undefined(binding)\n               ? term  // leave unbound variable as is\n               : instantiate_term(binding_value(binding), frame);\n    } else if (is_pair(term)) {\n        return pair(instantiate_term(head(term), frame), \n                    instantiate_term(tail(term), frame));\n    } else { // $\\texttt{term}$ is a primitive value\n        return term;\n    }\n}\n\t    "},{"body":"\n\t  The function\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"convert"},{"body":"\n\t  constructs a JavaScript syntax representation for a variable,\n\t  pair, or primitive value returned by\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"instantiate_term"},{"body":".\n\t  A pair in the original becomes an application of JavaScript's\n\t  pair constructor and a primitive value becomes a literal.\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction convert(term) {\n    return is_variable(term)\n           ? term\n           : is_pair(term)\n           ? make_application(make_name(\"pair\"),\n                              list(convert(head(term)),\n                                   convert(tail(term))))\n           : // $\\texttt{term}$ is a primitive value\n             make_literal(term);\n}\n\t    "},{"body":"\n\t  To illustrate these three functions, consider what happens when the query\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":41,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwKwPYBGAFACQAeANKADYCWAzgC7EBEAxvgLYAOArkwCmAJ1bVWAdzoAvAIbCAJqwCUyoA","body":"job($x, list(\"computer\", \"wizard\")) "},{"body":"\n\t  whose JavaScript syntax representation is given\n\t  at the beginning of section ","tag":"#text"},{"tag":"REF","body":"4.4.4.7","href":"/sicpjs/4.4.4#subsubsection_7"},{"body":", is\n\t  processed by the driver loop.\n\t  Let's say a frame ","tag":"#text"},{"body":"$g$","tag":"LATEX"},{"body":" of the result stream\n\t  binds the variable \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":" to the pair\n\t  ","tag":"#text"},{"body":"$[\\texttt{\"Bitdiddle\"}, \\texttt{\\$y}]$","tag":"LATEX"},{"body":" and \n\t  the variable ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":" to the pair\n\t  ","tag":"#text"},{"body":"$[\\texttt{\"Ben\"}, \\texttt{null}]$","tag":"LATEX"},{"body":". Then\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\ninstantiate_term(list(\"name\", \"$\\$$x\"), $g$)\n\t    "},{"body":"\n\t  returns the list\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":42,"eval":false,"output":"list(\"Bitdiddle\", \"Ben\")"},{"body":"\n\t  which\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"convert"},{"body":" transforms into\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":43,"eval":false,"output":"list(\"application\",\n     list(\"name\", \"pair\"),\n     list(list(\"literal\", \"Bitdiddle\"),\n          list(\"application\",\n               list(\"name\", \"pair\"),\n               list(list(\"literal\", \"Ben\"),\n                    list(\"literal\", null)))))"},{"body":"\n\t  The result of\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"instantiate_expression"},{"body":"\n\t  applied to the JavaScript syntax representation of the query and\n\t  the frame ","tag":"#text"},{"body":"$g$","tag":"LATEX"},{"body":" is:\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":44,"eval":false,"output":"list(\"application\",\n     list(\"name\", \"job\"),\n     list(list(\"application\",\n               list(\"name\", \"pair\"),\n               list(list(\"literal\", \"Bitdiddle\"),\n                    list(\"application\",\n                         list(\"name\", \"pair\"),\n                         list(list(\"literal\", \"Ben\"),\n                              list(\"literal\", null))))),\n          list(\"application\",\n               list(\"name\", \"list\"),\n               list(list(\"literal\", \"computer\"),\n                    list(\"literal\", \"wizard\")))))"},{"body":"\n\t  The driver loop unparses this representation and displays it as:\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":45,"eval":false,"output":"'job(list(\"Bitdiddle\", \"Ben\"), list(\"computer\", \"wizard\")))'"}]},{"tag":"SUBHEADING","id":"#h14","child":[{"body":"The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"}]},{"tag":"TEXT","id":"#p40","child":[{"body":"\n\t  The function ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":"\n\t  transforms a component given in the  JavaScript syntax representation\n\t  into a string by applying the syntax rules\n\t  of section ","tag":"#text"},{"tag":"REF","body":"4.1.2","href":"/sicpjs/4.1.2"},{"body":".\n\t  We describe ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":" only for\n\t  those kinds of expressions that appear in the examples of\n\t  section ","tag":"#text"},{"tag":"REF","body":"4.4.1","href":"/sicpjs/4.4.1"},{"body":", leaving statements\n\t  and the remaining kinds of expressions\n\t  as exercise ","tag":"#text"},{"tag":"REF","body":"4.2","href":"/sicpjs/4.1.2#ex-4.2"},{"body":". A literal is transformed by\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stringify"},{"body":"ing its value, and\n\t  a name is transformed into its\n\t  \n\t  symbol.\n\t  An application is formatted by unparsing the function expression,\n\t  which we can assume to be a name here, followed by the comma-separated \n\t  argument expression strings enclosed in parentheses.\n\t  Binary operator combinations are formatted using infix notation.\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction unparse(exp) {\n    return is_literal(exp)\n           ? stringify(literal_value(exp))\n           : is_name(exp)\n           ? symbol_of_name(exp)\n           : is_list_construction(exp)\n           ? unparse(make_application(make_name(\"list\"), \n                                      element_expressions(exp)))\n           : is_application(exp) && is_name(function_expression(exp))\n           ? symbol_of_name(function_expression(exp)) +\n                 \"(\" +\n                 comma_separated(map(unparse, arg_expressions(exp))) +\n                 \")\"\n           : is_binary_operator_combination(exp)\n           ? \"(\" + unparse(first_operand(exp)) +\n             \" \" + operator_symbol(exp) +\n             \" \" + unparse(second_operand(exp)) +\n             \")\"\n           $\\langle{}$unparsing other kinds of JavaScript components$\\rangle$\n           : error(exp, \"unknown syntax -- unparse\");\n}\nfunction comma_separated(strings) {\n    return accumulate((s, acc) => s + (acc === \"\" ? \"\" : \", \" + acc),\n                      \"\",\n                      strings);\n}\n\t    "},{"body":"\n\t  The function\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":"\n\t  would work fine without the clause\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":46,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwLlAJYDOA+gDbEAuJAxgPYB2RlATgK42UGMAUApgA8ADgEosAflBsGQgIYsifHgFtZAaz4lZQoRRqyuvVRpINZypQCIKzSyIA0oLKBeu37jx75k+FhtUEhFj4iIm4mfmERaKA","body":": is_list_construction(exp)\n? unparse(make_application(make_name(\"list\"), \n                           element_expressions(exp))) "},{"body":"\n\t  but the output string would be unnecessarily\n\t  verbose in cases where pattern variables are instantiated\n\t  by lists. In the example above, where processing the query\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":47,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwKwPYBGAFACQAeANKADYCWAzgC7EBEAxvgLYAOArkwCmAJ1bVWAdzoAvAIbCAJqwCUyoA","body":"job($x, list(\"computer\", \"wizard\")) "},{"body":"\n\t  yields a frame that binds \n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$x"},{"body":"\n\t  to ","tag":"#text"},{"body":"$[\\texttt{\"Bitdiddle\"}, [\\texttt{\"Ben\"}, \\texttt{null}]]$","tag":"LATEX"},{"body":",\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unparse"},{"body":" produces\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":48,"eval":false,"output":"'job(list(\"Bitdiddle\", \"Ben\"), list(\"computer\", \"wizard\"))'"},{"body":"\n\t  However, without the clause it would produce\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":49,"eval":false,"output":"'job(pair(\"Bitdiddle\", pair(\"Ben\", null)), list(\"computer\", \"wizard\"))'"},{"body":"\n\t  which explicitly constructs the two pairs that make up the first list.\n          To achieve the more concise formatting used throughout \n\t  section ","tag":"#text"},{"tag":"REF","body":"4.4.1","href":"/sicpjs/4.4.1"},{"body":",\n\t  we inserted the clause to check\n\t  if the expression constructs a list, in which case\n\t  we format it as a single application of\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list"},{"body":" to the list of element\n\t  expressions that we extract from the expression.\n\t  A list construction is the literal\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":" or\n\t  an application of\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n\t  whose second argument is itself a list construction.\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":50,"eval":false,"body":"function is_list_construction(exp) {\n   return (is_literal(exp) && is_null(literal_value(exp))) ||\n          (is_application(exp) && is_name(function_expression(exp)) &&\n           symbol_of_name(function_expression(exp)) === \"pair\" &&\n           is_list_construction(head(tail(arg_expressions(exp)))));\n}"},{"body":"\n\t  Extracting the element expressions from a given list construction\n\t  amounts to collecting the first arguments of applications of\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":" until the literal\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"null"},{"body":" is reached.\n\t  ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction element_expressions(list_constr) {\n    return is_literal(list_constr)\n           ? null // $\\texttt{list\\char`_constr}$ is literal $\\texttt{null}$\n           :      // $\\texttt{list\\char`_constr}$ is application of $\\texttt{pair}$\n             pair(head(arg_expressions(list_constr)),\n                  element_expressions(\n                      head(tail(arg_expressions(list_constr)))));\n}\n\t    "}]},{"tag":"SUBHEADING","id":"#h15","child":[{"body":"Predicates and selectors for the query-language-specific representation","tag":"#text"}]},{"tag":"TEXT","id":"#p41","child":[{"body":"\n      The functions ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"type"},{"body":"\n      and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"contents"},{"body":", used by\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_query"},{"body":"\n      (section ","tag":"#text"},{"tag":"REF","body":"4.4.4.2","href":"/sicpjs/4.4.4#subsubsection_2"},{"body":"), specify that a\n      syntactic form of a query-language-specific representation\n      is identified by\n      the string in its head.\n      They are the same as the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"type_tag"},{"body":"\n      and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"contents"},{"body":"\n      functions\n      in section ","tag":"#text"},{"tag":"REF","body":"2.4.2","href":"/sicpjs/2.4.2"},{"body":", except for the\n      error message.\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":51,"eval":true,"prependLength":186,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUAzAVwDsBjAFwEsB7YgZwICdqBbCGeJVNARjQCYcRMlVqhKdAPrkAhgHM5AUwAmkgDYTyAClKsADrUXFyAGlDkAFounyAlKADeWUC9CNF5Qo2LipemZSMOvqGxvYAZOGgVjLKwSwGxEbk9gC86eZWNnIA3FgAvkIkFDQ+EuqU5IqMMmrxicn2Tq5uHl5lUrIKKhV02roJoaagAEQaVTVqI7Z5hcIlYuPVtZIAbrWEivVDTS3Oru6e3tGKsVqylHUDDWEzBUUipaAsMgDW1kuTWutqm037LkO7VAGj6WjGlWWUzMPz+sweCw6kmIMhYW2uO0cANaRyRXSUqlB-RCSWMZhGKLR03hWHmoh8L3eyNRWzoAE8WAAjahqf4tIHHIngymKEZmdlcnl3Qq04r00AS7lqSTUfDMtHbUkpLH8trHGJxC5XEmNaUI+XlGR0OiUOTENHGTWNHUHPV4+QE3rEwZa8lWm12h3kan3OlPf22+3JSSKnlOsIuwFuk5nI1aA3nALGn2m2xmsNiCOB6Ow6yKAAeenc1tK8e1zVduJThqzmcudbzZtljzE5WUilIahkNXpHcTOOB5XxPSFGN9o109Fkxkk-cHw5k9OmoAAPjvsS1XFOPTPNHXyetGJQZJy1NY10OR6Vt3uD4ffNlPbOTWTRgXiKuA6Ppuz5dv+oAPhu9IxhySpjg2SZNrGyqquqWwZmmc65vC4GQU+tBrBsZaVtWNq0PB2ICj4GGtphP4pHmNLgYy1iLn0MgrnhIHkSKMJEZIFZVooNa0HyjbAkKIxscu5CAeu+HEGKoC8aApYCSRwlkcQYFyk85RDlyygyOpQkicQFG6k2x7dISZ5Yb+YyopyRkmaRoE4bpixOS5-g1GiEwwZKah0BZ4nHC8ehaMhKpqipNHtvZDH5p5PgGc5xncsobKhYhwLxXUdE5rcOk9gybwfN5xmCW55G+SyEx0GYmVsmJuWCmejmGVVGlmUpdX+dUjWgM1JWIh+-5ycBo6JU0ACQeyWZOnQnrZYKJeSE1cVuyWlQQKWTVBpRoTlE7tX0kjuPg56gDwO1jZtQGHQR-UeINJ1USCmgXYoV3raA-B3fKD3ydxAHNe9yZEt9v30WYADMgNPMDyrkNQkjSRxskPhDTYsejtDsZxj0KVob7vq4yNPQBIodiYZPk885XqJVrmabW9MMxT+1bUdL0NbTHOc3tpUHQpkjgzNjH3N2Y3lFRMayFUQY5R91lfnZsOjPL7FK8kIZzClp0AdVbPkTNiYfflHajRaUiLsolSlLUONLZ+p5rZrUm0A79IrCbvX2K+QsftOq3ejcwxe8QPtO8qOuKEG+sy-K9uO7QKxCQ7pCbui9GtR9UOXddt0ebtqe+8qbGKAAjpsjrmwhBdfUXf0A6XY3l7Hki1BMKJUKsudFfWAJN+dLeawjTGG+UdA13XpCsuQLDD2F7o2V6UVL5Hs+10YC9J+BO-z9Y8dBiFfTL7sLgj8mVsXwx7dA4E52n8km-L3Q+e36ccT35-j9PGrLJV+xhz5b0-hbZMaY-6I17FIBOehyBshjHPPei8P5fyslIYghA1B1BgQAuBzMX6KwTm-GBkCsHIlwQVVsMCbZ6SkLeagpBXgu2OGrd24chjkmYawg+hs+GvHFtQLK7DqI-zbNmCOUsDa7TxkIzeOcgytSNp9MEIwhFKRASkKeu1yjUD0MsVGjB8ZckoH3WsDd5quEosmcoJBhzIMMcY6gpiBicgsaDMcQchblE8SiRgzijEjjcWYgJ3iZqEKRI4oJKoQmbjCR4rx0086OBsdfRaHDlrr2-EPcksTgmuPcawCJ21okfgiXElxoSSnmMsWbNJDgMmgDsVQ0OG8-qaK8dUhJJjwkpPcqGQ2NTEmmOQuI9Rslx75JurAnw+Bn6yVGdHSZhcfrXTbsM3as97bxOWKshubSJLNw2X9Se0tmJMxkHoPQGhs6jgmv7LSZhhxyEIEGVmZkIEITUZJG5dzKAPOfHTYOh4nk9ReaAN5HzozPNKP-S5Iy+lJNKYMgiqNu63PuZEpp2JpKgFGSY0AqRCUovGbBOMUTjnZMkIU-ZtSBkNPMjNQWoAAD8jMmQApxaOPGNMiVuNsKCsFoqWhCkWYwc6Ky4iS1sGygAXFy6wPKgXeP5SyLQgrGDCrZWKw8EqlkMo4rKvOIr9UWpcLs72xrDl51keaRhWLAXAsaUPTBrsOl5Ijn6bFarynbPuvteFbqZGULypIwqMj5nQsYHIL5WkQpHNXs2KRaa5V6LGkgoxWhBKqNVn4AIQQ81ss5RmEtwclXVGYMWysBTiCvGINQAA7j4ENPhs2ihjYuKooDc2VnzfYwtgR+16HlcHTlaYK1CyrYwGto762NpbW2yFTwe3JDoEnLAvlZ6SF3nEgejBuSzy0AAcn9NUbQlqhYAB0sCMFwVsAFRhVCYvwG4lgWgcF4LMGyX9nYLWnovNUY9Xa8g7usPu5Bh7QNnovYwK916GZ3ofXeLQz7o7SDRu+xgn7-AjsIDCYVoA-2gHw0EQjoAABeeYzCgDvYeDDr7sMfu+L+swNG8xIaA6MGD1BZ4hlpEajidBm3VDg7cl9WHJA4c-eWdjUzwQyCUpolTpAVPKGmLYU9dw8AQb3ZsA9IH+NbHPZJzDb7WPyZI2Yf5KnORqY01pnjIxqRAA","body":"function type(exp) {\n    return is_pair(exp)\n           ? head(exp)\n           : error(exp, \"unknown expression type\");\n}\nfunction contents(exp) {\n    return is_pair(exp)\n           ? tail(exp)\n           : error(exp, \"unknown expression contents\");\n} "}]},{"tag":"TEXT","id":"#p42","child":[{"body":"\n      The following functions, used by\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"query_driver_loop"},{"body":"      \n      (in section ","tag":"#text"},{"tag":"REF","body":"4.4.4.1","href":"/sicpjs/4.4.4#subsubsection_1"},{"body":"),\n      specify that rules and assertions are added to the data base by an\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"assert"},{"body":" command, which the function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"convert_to_query_syntax"},{"body":" transforms\n      into a pair of the form\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"[\"assert\", "},{"tag":"META","body":"rule-or-assertion"},{"tag":"JAVASCRIPTINLINE","body":"]"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":52,"eval":true,"prependLength":197,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUAzAVwDsBjAFwEsB7YgZwICdqBbCGeJVNARjQCYcRMlVqhKdAPrkAhgHM5AUwAmkgDYTyAClKsADrUXFyAGlDkAFounyAlKADeWUC9CNF5Qo2LipemZSMOvqGxvYAZOGgVjLKwSwGxEbk9gC86eZWNnIA3FgAvkIkFDQ+EuqU5IqMMmrxicn2Tq5uHl5lUrIKKhV02roJoaagAEQaVTVqI7Z5hcIlYuPVtZIAbrWEivVDTS3Oru6e3tGKsVqylHUDDWEzBUUipaAsMgDW1kuTWutqm037LkO7VAGj6WjGlWWUzMPz+sweCw6kmIMhYW2uO0cANaRyRXSUqlB-RCSWMZhGKLR03hWHmoh8L3eyNRWzoAE8WAAjahqf4tIHHIngymKEZmdlcnl3Qq04r00AS7lqSTUfDMtHbUkpLH8trHGJxC5XEmNaUI+XlGR0OiUOTENHGTWNHUHPV4+QE3rEwZa8lWm12h3kan3OlPf22+3JSSKnlOsIuwFuk5nI1aA3nALGn2m2xmsNiCOB6Ow6yKAAeenc1tK8e1zVduJThqzmcudbzZtljzE5WUilIahkNXpHcTOOB5XxPSFGN9o109Fkxkk-cHw5k9OmoAAPjvsS1XFOPTPNHXyetGJQZJy1NY10OR6Vt3uD4ffNlPbOTWTRgXiKuA6Ppuz5dv+oAPhu9IxhySpjg2SZNrGyqquqWwZmmc65vC4GQU+tBrBsZaVtWNq0PB2ICj4GGtphP4pHmNLgYy1iLn0MgrnhIHkSKMJEZIFZVooNa0HyjbAkKIxscu5CAeu+HEGKoC8aApYCSRwlkcQYFyk85RDlyygyOpQkicQFG6k2x7dISZ5Yb+YyopyRkmaRoE4bpixOS5-g1GiEwwZKah0BZ4nHC8ehaMhKpqipNHtvZDH5p5PgGc5xncsobKhYhwLxXUdE5rcOk9gybwfN5xmCW55G+SyEx0GYmVsmJuWCmejmGVVGlmUpdX+dUjWgM1JWIh+-5ycBo6JU0ACQeyWZOnQnrZYKJeSE1cVuyWlQQKWTVBpRoTlE7tX0kjuPg56gDwO1jZtQGHQR-UeINJ1USCmgXYoV3raA-B3fKD3ydxAHNe9yZEt9v30WYADMgNPMDyrkNQkjSRxskPhDTYsejtDsZxj0KVob7vq4yNPQBIodiYZPk885XqJVrmabW9MMxT+1bUdL0NbTHOc3tpUHQpkjgzNjH3N2Y3lFRMayFUQY5R91lfnZsOjPL7FK8kIZzClp0AdVbPkTNiYfflHajRaUiLsolSlLUONLZ+p5rZrUm0A79IrCbvX2K+QsftOq3ejcwxe8QPtO8qOuKEG+sy-K9uO7QKxCQ7pCbui9GtR9UOXddt0ebtqe+8qbGKAAjpsjrmwhBdfUXf0A6XY3l7Hki1BMKJUKsudFfWAJN+dLeawjTGG+UdA13XpCsuQLDD2F7o2V6UVL5Hs+10YC9J+BO-z9Y8dBiFfTL7sLgj8mVsXwx7dA4E52n8km-L3Q+e36ccT35-j9PGrLJV+xhz5b0-hbZMaY-6I17FIBOehyBshjHPPei8P5fyslIYghA1B1BgQAuBzMX6KwTm-GBkCsHIlwQVVsMCbZ6SkLeagpBXgu2OGrd24chjkmYawg+hs+GvHFtQLK7DqI-zbNmCOUsDa7TxkIzeOcgytSNp9MEIwhFKRASkKeu1yjUD0MsVGjB8ZckoH3WsDd5quEosmcoJBhzIMMcY6gpiBicgsaDMcQchblE8SiRgzijEjjcWYgJ3iZqEKRI4oJKoQmbjCR4rx0086OBsdfRaHDlrr2-EPcksTgmuPcawCJ21okfgiXElxoSSnmMsWbNJDgMmgDsVQ0OG8-qaK8dUhJJjwkpPcqGQ2NTEmmOQuI9Rslx75JurAnw+Bn6yVGdHSZhcfrXTbsM3as97bxOWKshubSJLNw2X9Se0tmJMxkHoPQGhs6jgmv7LSZhhxyEIEGVmZkIEITUZJG5dzKAPOfHTYOh4nk9ReaAN5HzozPNKP-S5Iy+lJNKYMgiqNu63PuZEpp2JpKgFGSY0AqRCUovGbBOMUTjnZMkIU-ZtSBkNPMjNQWoAAD8jMmQApxaOPGNMiVuNsKCsFoqWhCkWYwc6Ky4iS1sGygAXFy6wPKgXeP5SyLQgrGDCrZWKw8EqlkMo4rKvOIr9UWpcLs72xrDl51keaRhWLAXAsaUPTBrsOl5Ijn6bFarynbPuvteFbqZGULypIwqMj5nQsYHIL5WkQpHNXs2KRaa5V6LGkgoxWhBKqNVn4AIQQ81ss5RmEtwclXVGYMWysBTiCvGINQAA7j4ENPhs2ihjYuKooDc2VnzfYwtgR+16HlcHTlaYK1CyrYwGto762NpbW2yFTwe3JDoEnZOTr-TVFHHm8cH1O2jrSBkEYu7GDBgqRe6C4MD0ODURmddfa80zFADKXys9JC7ziQPRg3JZ5aAAOQ3q0JaoWAAdLAjBcFbABUYVQmL8BuJYFoHBeCzBskw52C1QGLzVAA12vIn7rA-uQX+wjwHQPgc5lBmDd4tDwejtINGyHGCof8COwgMJhWgCw6ATjQRuOgAAF55jMKAKDh4mOIdYyh74mGzBibzDRvDowKPUFniGWkRqOJ0GbdUKjtyEMsckGx1D5ZFNTPBDIJSmi7OkDs8oaYtggN3DwCR79mxf0Ec01sEDxnmNIfk5ZvjZh-l2c5A5pzLm1MjGpEAA","body":"function is_assertion(exp) {\n    return type(exp) === \"assert\";\n}\nfunction assertion_body(exp) { return head(contents(exp)); } "}]},{"tag":"TEXT","id":"#p43","child":[{"body":"\n      Here are the declarations of the predicates and selectors\n      for the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"and"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"or"},{"body":", ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"not"},{"body":", and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":"\n      syntactic forms\n      (section ","tag":"#text"},{"tag":"REF","body":"4.4.4.2","href":"/sicpjs/4.4.4#subsubsection_2"},{"body":"):\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":53,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwMwK4B2AxgC4CWA9oaOQM4D6ApgLYAOpAng8dQFZEyVQgAomADzZ0AlKADeoAE5NS+RTXoNC+ADY6xkmQG5QAXxwESFaqFzlFdUj36DSBqbIXLV60AAsmAEMAE3djMwtXYSUmR2dCASs6MM8YnxpSQPJ9CQ8Tczwom01WDm5g+kShahT5NLUNRm09FPzIq2i7BycKuiq3XJk67wb-INDB6TbCjptlON7+5MnhlVHM7NaImeqaQiYAc0DSJmCGAEd8JkVOWq813wCQrYLLXdA+QIA3QLpiRXIHAYbGUFWIxyYzEk8zowju9Ue4xeODYgQckMu124X2uACNKHQmCIAOS-QmKNygKnUmm0ul0gA6WEUuiJgTYbCYhDOpEoDFwlEULBEzR0ABpQJwJZxpLL6fLQMSJQAiHGKfGE5VTLCo9EXK43BhqjVE0l0cmUhVW+lMlk6Nkcrk8vkCoUiVH2ET4CVfaTSiUexReiUAL1lEtATNp7M53IYvP5guFX39oDDcut9KVoFVeIJTC1Rgs9jigUIdAA7tcSTGnfGXUmROJUzp6G5lYFlSrcV2c8Re8rglrpMTtSBQLrCfqsUa84Sa464wnXcLm5KJa3HCIOwOeyr+yqh7Ls8rC0A","body":"function is_empty_conjunction(exps) { return is_null(exps); }\n\nfunction first_conjunct(exps) { return head(exps); }\n\nfunction rest_conjuncts(exps) { return tail(exps); }\n\nfunction is_empty_disjunction(exps) { return is_null(exps); }\n\nfunction first_disjunct(exps) { return head(exps); }\n\nfunction rest_disjuncts(exps) { return tail(exps); }\n\nfunction negated_query(exps) { return head(exps); }\n\nfunction javascript_predicate_expression(exps) { return head(exps); } "}]},{"tag":"TEXT","id":"#p44","child":[{"body":"\n      The following three\n      functions\n      define the query-language-specific representation of rules:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":54,"eval":true,"prependLength":186,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUAzAVwDsBjAFwEsB7YgZwICdqBbCGeJVNARjQCYcRMlVqhKdAPrkAhgHM5AUwAmkgDYTyAClKsADrUXFyAGlDkAFounyAlKADeWUC9CNF5Qo2LipemZSMOvqGxvYAZOGgVjLKwSwGxEbk9gC86eZWNnIA3FgAvkIkFDQ+EuqU5IqMMmrxicn2Tq5uHl5lUrIKKhV02roJoaagAEQaVTVqI7Z5hcIlYuPVtZIAbrWEivVDTS3Oru6e3tGKsVqylHUDDWEzBUUipaAsMgDW1kuTWutqm037LkO7VAGj6WjGlWWUzMPz+sweCw6kmIMhYW2uO0cANaRyRXSUqlB-RCSWMZhGKLR03hWHmoh8L3eyNRWzoAE8WAAjahqf4tIHHIngymKEZmdlcnl3Qq04r00AS7lqSTUfDMtHbUkpLH8trHGJxC5XEmNaUI+XlGR0OiUOTENHGTWNHUHPV4+QE3rEwZa8lWm12h3kan3OlPf22+3JSSKnlOsIuwFuk5nI1aA3nALGn2m2xmsNiCOB6Ow6yKAAeenc1tK8e1zVduJThqzmcudbzZtljzE5WUilIahkNXpHcTOOB5XxPSFGN9o109Fkxkk-cHw5k9OmoAAPjvsS1XFOPTPNHXyetGJQZJy1NY10OR6Vt3uD4ffNlPbOTWTRgXiKuA6Ppuz5dv+oAPhu9IxhySpjg2SZNrGyqquqWwZmmc65vC4GQU+tBrBsZaVtWNq0PB2ICj4GGtphP4pHmNLgYy1iLn0MgrnhIHkSKMJEZIFZVooNa0HyjbAkKIxscu5CAeu+HEGKoC8aApYCSRwlkcQYFyk85RDlyygyOpQkicQFG6k2x7dISZ5Yb+YyopyRkmaRoE4bpixOS5-g1GiEwwZKah0BZ4nHC8ehaMhKpqipNHtvZDH5p5PgGc5xncsobKhYhwLxXUdE5rcOk9gybwfN5xmCW55G+SyEx0GYmVsmJuWCmejmGVVGlmUpdX+dUjWgM1JWIh+-5ycBo6JU0ACQeyWZOnQnrZYKJeSE1cVuyWlQQKWTVBpRoTlE7tX0kjuPg56gDwO1jZtQGHQR-UeINJ1USCmgXYoV3raA-B3fKD3ydxAHNe9yZEt9v30WYADMgNPMDyrkNQkjSRxskPhDTYsejtDsZxj0KVob7vq4yNPQBIodiYZPk885XqJVrmabW9MMxT+1bUdL0NbTHOc3tpUHQpkjgzNjH3N2Y3lFRMayFUQY5R91lfnZsOjPL7FK8kIZzClp0AdVbPkTNiYfflHajRaUiLsolSlLUONLZ+p5rZrUm0A79IrCbvX2K+QsftOq3ejcwxe8QPtO8qOuKEG+sy-K9uO7QKxCQ7pCbui9GtR9UOXddt0ebtqe+8qbGKAAjpsjrmwhBdfUXf0A6XY3l7Hki1BMKJUKsudFfWAJN+dLeawjTGG+UdA13XpCsuQLDD2F7o2V6UVL5Hs+10YC9J+BO-z9Y8dBiFfTL7sLgj8mVsXwx7dA4E52n8km-L3Q+e36ccT35-j9PGrLJV+xhz5b0-hbZMaY-6I17FIBOehyBshjHPPei8P5fyslIYghA1B1BgQAuBzMX6KwTm-GBkCsHIlwQVVsMCbZ6SkLeagpBXgu2OGrd24chjkmYawg+hs+GvHFtQLK7DqI-zbNmCOUsDa7TxkIzeOcgytSNp9MEIwhFKRASkKeu1yjUD0MsVGjB8ZckoH3WsDd5quEosmcoJBhzIMMcY6gpiBicgsaDMcQchblE8SiRgzijEjjcWYgJ3iZqEKRI4oJKoQmbjCR4rx0086OBsdfRaHDlrr2-EPcksTgmuPcawCJ21okfgiXElxoSSnmMsWbNJDgMmgDsVQ0OG8-qaK8dUhJJjwkpPcqGQ2NTEmmOQuI9Rslx75JurAnw+Bn6yVGdHSZhcfrXTbsM3as97bxOWKshubSJLNw2X9Se0tmJMxkHoPQGhs6jgmv7LSZhhxyEIEGVmZkIEITUZJG5dzKAPOfHTYOh4nk9ReaAN5HzozPNKP-S5Iy+lJNKYMgiqNu63PuZEpp2JpKgFGSY0AqRCUovGbBOMUTjnZMkIU-ZtSBkNPMjNQWoAAD8jMmQApxaOPGNMiVuNsKCsFoqWhCkWYwc6Ky4iS1sGygAXFy6wPKgXeP5SyLQgrGDCrZWKw8EqlkMo4rKvOIr9UWpcLs72xrDl51keaRhWLAXAsaUPTBrsOl5Ijn6bFarynbPuvteFbqZGULypIwqMj5nQsYHIL5WkQpHNXs2KRaa5V6NllIRguCtj+mqPSVRqscnqzBPmxg9JyQ5rvAIsutBByEC0loatihdiW0ja2FtjFQAynAi2kRYiu3jmLdQvBaa0xdrzGyzl-y1AAHcZBsk6Dm0U8rg5KqthO3NnYaS+VnpIXecSB6MG5LPLQAByct2hLVCwADpYBbVoAFRhVCYvwG4lgWgcF4LMGyX9nYLXnovNUU9q68h7usIe5Bx7QMXqvVoG9nN72PufdHaQaN32ME-f4QIWhCAwmFaAP9oAcNBHw6AAAXnmMwoB72HlQ6+jDH7vi-rMFRvMiGgOjBg9QWeIZaRGo4nQOd1Q4O3JfehyQmHP3llY1M8EMglKaKU6QJTyhpi2HPXcPAEGD2bCPSB3jWxL3ibQ2+5jsmiNmH+UpzkKm1Maa4yMakQA","body":"function is_rule(assertion) {\n    return is_tagged_list(assertion, \"rule\");\n}\nfunction conclusion(rule) { return head(tail(rule)); }\n\nfunction rule_body(rule) {\n    return is_null(tail(tail(rule)))\n           ? list(\"always_true\")\n           : head(tail(tail(rule)));\n} "}]},{"id":"#sec4.4.4.8","tag":"TITLE","body":"4.4.4.8   Frames and Bindings"},{"tag":"TEXT","id":"#p45","child":[{"body":"\n      Frames are represented as lists of bindings, which are\n      variable-value pairs:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":55,"eval":true,"prependLength":55,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCyUB7ABwFMAnAQwBcBLfAOwH1LyAjAG2IBpRCBXS0OToATUAHNilXGABmpfAFtQAYwAW5QpTKgAzKAAUAZ2LKa9XWh2WAlDhm86p2nUGHD+ZfoDWxAJ7dSE3xSYUNrUABvLFAY0EDKXlIXakMGOl42Nn1A5WDQ21jCwoB+UAdhYhlqOmJhaKKigC5QYgBHXnIsn39QVWJyYX0+geygkLDrAoaS3v7BnLyw+umY5vI3D28-bmZqLIXxyYBuLABfOwcncwVyHyZWDn1wqMLcukMBNg9O+-ZiUAAvKA2ClKPoAEQAKmYf0h4OsJ0K9kcZhcX3wXl4hC2vgYAEZuN0GAAmZ7LIpvD6gQy8FgwjiA1zuTxEgmgXZZL7KH704jHcmFagyAwpBjlSrVWpGWm8yaRAXTeKJFziqo1YSI6anFpsYzylavehUg6iIHrZk4kk7ch7aV0h58hEKhpKpKgUWqyXzMbCKYGlalT3q53+1bsm37H1OlbnQqx2LIq7Jd5kMGswl+K2gABunV4fP100pAhp9r+jPNm3T4dtXJ5Dv5KyFItSQalpdlZND1Mk91r3zYvw4nBD3Z4NtI+hBH0tbMIE8txO4ubY+cmI7HY45U4HQ8d0a1Or1L1DxbiPorGxZmaXNayHYbB-9zf0HpEEvVo1yITlJ83xkoPt7xlB0N03f152oSdIMnIlbxXNdrVtB8-kmJ8DW1YhdX+P8xwAoCvzyZc8z5TV-XjBoKNAKjE1RUBhBSedKDUfQFC7RVJGVUAlABXjQHBdFMUIcFRwaUpBKxUSmm4wE+PBapjFISgRPA0oFNTKTCmaMh5EnBRuHBBwvDofAAHcXCIMgqGcUAAFpbPDP54TI6jyVdFwGMMJi1BOc4sDPSyKFRPdGRuO5eSeE4zwkAQgUC6z6D3CEJOEp0zz4WKCBIILnCS+SUyU5yLhRGywuIBgWGqBi6DEfRc1IahQJzEj2JidzxyguryAapqENIs4sFomzKpEaoxAYerGr+fQRuqsRWvPBI3WGQZZrGp1ziG8w1pqiaSJmqr1sLNrOLdbcdvm3zBsuOiLoYaoGDkcgFGILqer+bgnpehb2srTxJqar7+s2m6bOIAAPLQRDeqbh2a1cuFAIGftOlwYNY25youmHepaz6KG+q6sHnUhjAYdoyFxbMyBYfBjH0AByc1U30cDuwAHSwUgMlejQSBEJh8Ee4IFH0dJMm4HpfDQtmGYM6nSFp4wipJsmKdIKmabp16mbcFm2dDTnucePniAFyghZkEX9HR3hl2sSXuFt7gAC91xiTmilN83Let7NHdAN25QN0A5f4hWleIIrBqgj4GCEQxTLIRnveEQXhdIUXwYD6cwXBchwQMlhC-45QS-BYR4WsBmnTwVXyvVzXFe1lPCH5tOLYzrOc9BCEC6L8uy4MyvJjD8FnKAA","body":"function make_binding(variable, value) {\n    return pair(variable, value);\n}\nfunction binding_variable(binding) {\n    return head(binding);\n}\nfunction binding_value(binding) {\n    return tail(binding);\n}\nfunction binding_in_frame(variable, frame) {\n    return assoc(variable, frame);\n}\nfunction extend(variable, value, frame) {\n    return pair(make_binding(variable, value), frame);\n} "}]},{"tag":"EXERCISE","title":"Exercise 4.68","id":"#ex-4.68","child":[{"body":"\n      Louis Reasoner wonders why the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"simple_query"},{"body":"\n      and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"disjoin"},{"body":"functions\n      (section ","tag":"#text"},{"tag":"REF","body":"4.4.4.2","href":"/sicpjs/4.4.4#subsubsection_2"},{"body":") are implemented using\n      delayed expressions\n      rather than being defined as follows:\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":56,"eval":false,"body":"function simple_query(query_pattern, frame_stream) {\n    return stream_flatmap(\n               frame =>\n                 stream_append(find_assertions(query_pattern, frame),\n                               apply_rules(query_pattern, frame)),\n               frame_stream);\n}\nfunction disjoin(disjuncts, frame_stream) {\n    return is_empty_disjunction(disjuncts)\n           ? null\n           : interleave(\n                 evaluate_query(first_disjunct(disjuncts), frame_stream),\n                 disjoin(rest_disjuncts(disjuncts), frame_stream));\n}"},{"body":"\n      Can you give examples of queries where these simpler definitions would\n      lead to undesirable behavior?\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.69","id":"#ex-4.69","child":[{"body":"\n      Why do ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"disjoin"},{"body":" and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_flatmap"},{"body":"\n      interleave the streams rather than simply append them?  Give examples that\n      illustrate why interleaving works better.  (Hint: Why did we use\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"interleave"},{"body":" in\n      section ","tag":"#text"},{"tag":"REF","body":"3.5.3","href":"/sicpjs/3.5.3"},{"body":"?)\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.70","id":"#ex-4.70","child":[{"body":"\n    Why does\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"flatten_stream"},{"body":"\n    use\n    a delayed expression in its body?\n    What would be wrong with defining it as follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":57,"eval":false,"body":"function flatten_stream(stream) {\n    return is_null(stream)\n           ? null\n           : interleave(head(stream),\n                        flatten_stream(stream_tail(stream)));\n}"}]},{"tag":"EXERCISE","title":"Exercise 4.71","id":"#ex-4.71","child":[{"body":"\n      Alyssa P. Hacker proposes to use a simpler version of\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"stream_flatmap"},{"body":"\n      in ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"negate"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":",\n\t\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"find_assertions"},{"body":".\n\t\n      She observes that the\n      function\n      that is mapped over the frame stream in these cases always produces either\n      the empty stream or a singleton stream, so no interleaving is needed when\n      combining these streams.\n      ","tag":"#text"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n          Fill in the missing expressions in Alyssa's program.\n          ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction simple_stream_flatmap(fun, s) {\n    return simple_flatten(stream_map(fun, s));\n}\nfunction simple_flatten(stream) {\n    return stream_map($\\langle{}$??$\\rangle$,\n                      stream_filter($\\langle{}$??$\\rangle$, stream));\n}\n\t    "}]},{"tag":"LI","child":[{"body":"\n          Does the query system's behavior change if we change it in this\n\t  way?\n\t","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 4.72","id":"#ex-4.72","child":[{"body":"\n      Implement for the query language a\n      syntactic form called\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unique"},{"body":".\n\t  Applictions of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unique"},{"body":"\n      should succeed if there is precisely one item in the data base satisfying\n      a specified query.  For example,\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":58,"eval":false,"body":"unique(job($x, list(\"computer\", \"wizard\")))"},{"body":"\n      should print the one-item stream\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":59,"eval":false,"body":"unique(job(list(\"Bitdiddle\", \"Ben\"), list(\"computer\", \"wizard\")))"},{"body":"\n      since Ben is the only computer wizard, and\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":60,"eval":false,"body":"unique(job($x, list(\"computer\", \"programmer\")))"},{"body":"\n      should print the empty stream, since there is more than one computer\n      programmer.  Moreover,\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":61,"eval":false,"body":"and(job($x, $j), unique(job($anyone, $j)))"},{"body":"\n      should list all the jobs that are filled by only one person, and the\n      people who fill them.\n      \n      There are two parts to implementing ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unique"},{"body":".\n      The first is to write a\n      function\n      that handles this\n      syntactic\n      form, and the second is to make\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_query"},{"body":"\n      dispatch to that\n      function.\n      The second part is trivial, since\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_query"},{"body":"\n      does its dispatching in a data-directed way.  If your\n      function\n      is called\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"uniquely_asserted"},{"body":",\n\t\n      all you need to do is\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":62,"eval":false,"body":"put(\"unique\", \"evaluate_query\", uniquely_asserted);"},{"body":"\n      and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_query"},{"body":"\n      will dispatch to this\n      function\n      for every query whose\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"type"},{"body":"(head)\n      is the\n      string","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"unique\""},{"body":".\n      The real problem is to write the\n      function","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"uniquely_asserted"},{"body":".\n\t\n      This should take as input the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"contents"},{"body":"(tail)\n      of the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unique"},{"body":" query, together with a stream\n      of frames.  For each frame in the stream, it should use\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_query"},{"body":"\n      to find the stream of all extensions to the frame that satisfy the given\n      query.  Any stream that does not have exactly one item in it should be\n      eliminated.  The remaining streams should be passed back to be accumulated\n      into one big stream that is the result of the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"unique"},{"body":" query.  This is similar to the\n      implementation of the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"not"},{"body":"syntactic\n      form.\n      \n      Test your implementation by forming a query that lists all people who\n      supervise precisely one person.\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.73","id":"#ex-4.73","child":[{"body":"\n      Our implementation of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"and"},{"body":" as a series\n      combination of queries\n      \n\t  (figure ","tag":"#text"},{"tag":"REF","body":"4.6","href":"/sicpjs/4.4.2#fig-4.6"},{"body":")\n\t\n      is\n      elegant, but it is inefficient because in processing the second query of\n      the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"and"},{"body":" we must scan the data base for each\n      frame produced by the first query.  If the data base has\n      ","tag":"#text"},{"body":"$N$","tag":"LATEX"},{"body":" elements, and a typical query produces a\n      number of output frames proportional to ","tag":"#text"},{"body":"$N$","tag":"LATEX"},{"body":"\n      (say ","tag":"#text"},{"body":"$N/k$","tag":"LATEX"},{"body":"), then scanning the data base for\n      each frame produced by the first query will require\n      ","tag":"#text"},{"body":"$N^{2}/k$","tag":"LATEX"},{"body":" calls to the pattern matcher.\n      Another approach would be to process the two clauses of the\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"and"},{"body":" separately, then look for all pairs of\n      output frames that are compatible.  If each query produces\n      ","tag":"#text"},{"body":"$N/k$","tag":"LATEX"},{"body":" output frames, then this means that we\n      must perform ","tag":"#text"},{"body":"$N^{2}/k^{2}$","tag":"LATEX"},{"body":" compatibility\n      checks—a factor of ","tag":"#text"},{"body":"$k$","tag":"LATEX"},{"body":" fewer than the\n      number of matches required in our current  method.\n      \n      Devise an implementation of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"and"},{"body":" that uses\n      this strategy.  You  must implement a\n      function\n      that takes two frames as inputs, checks whether the bindings in the\n      frames are compatible, and, if so, produces a frame that merges the two\n      sets of bindings.  This operation is similar to unification.\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.74","id":"#ex-4.74","child":[{"body":"\n      In section ","tag":"#text"},{"tag":"REF","body":"4.4.3","href":"/sicpjs/4.4.3"},{"body":" we saw that\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"not"},{"body":" and\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"javascript_predicate"},{"body":"\n      can cause the query language to give \"","tag":"#text"},{"body":"wrong","tag":"#text"},{"body":"\" answers if\n      these filtering operations are applied to frames in which variables\n      are unbound.  Devise a way to fix this shortcoming.  One idea is to\n      perform the filtering in a \"","tag":"#text"},{"body":"delayed","tag":"#text"},{"body":"\" manner by appending to\n      the frame a \"","tag":"#text"},{"body":"promise","tag":"#text"},{"body":"\" to filter that is fulfilled only when\n      enough variables have been bound to make the operation possible.  We could\n      wait to perform filtering until all other operations have been performed.\n      However, for efficiency's sake, we would like to perform filtering\n      as soon as possible so as to cut down on the number of intermediate frames\n      generated.\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.75","id":"#ex-4.75","child":[{"body":"\n      Redesign the query language as a\n      \n      nondeterministic program to be\n      implemented using the evaluator of\n      section ","tag":"#text"},{"tag":"REF","body":"4.3","href":"/sicpjs/4.3"},{"body":", rather than as a stream\n      process.  In this approach, each query will produce a single answer\n      (rather than the stream of all answers) and the user can type\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"retry"},{"body":"\n      to see more answers.  You should find that much of the mechanism we built\n      in this section is subsumed by nondeterministic search and backtracking.\n      You will probably also find, however, that your new query language has\n      subtle differences in behavior from the one implemented here.  Can you\n      find examples that illustrate this difference?\n      ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.76","id":"#ex-4.76","child":[{"body":"\n      When we implemented the\n      JavaScript\n      evaluator in section ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":", we saw how to use\n      local environments to avoid\n      \n      name conflicts between the parameters of\n      functions.\n      For example, in evaluating\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":63,"eval":true,"prependLength":0,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHTpQKCwMwK4B2AxgC4CWA9oaAM4CO+AhgE4CmAFAB4CUoA3llDDQ7UvhY0uoAFSguAbiwBfPETJUatfAFsA+pVx6GzdrW4AaUAE8+gkaLbjJdRq069QAalenOtpVVtfUNjNzMOAGYrFB4FIA","body":"function square(x) {\n    return x * x;\n}\nfunction sum_of_squares(x, y) {\n    return square(x) + square(y);\n}\nsum_of_squares(3, 4); "},{"body":"\n      there is no confusion between the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":" in\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"square"},{"body":" and the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"x"},{"body":"\n      in\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"sum_of_squares"},{"body":",\n\t\n      because we evaluate the body of each\n      function\n      in an environment that is specially constructed to contain\n      bindings for the local\n      names.\n      In the query system, we used a\n      different strategy to avoid name conflicts in applying rules.  Each\n      time we apply a rule we rename the variables with new names that are\n      guaranteed to be unique.  The analogous strategy for the\n      JavaScript\n      evaluator would be to do away with local environments and simply\n      rename the variables in the body of a\n      function\n      each time we apply the\n      function.\n      Implement for the query language a rule-application method that uses\n      environments rather than renaming.  See if you can build on your\n      environment structure to create constructs in the query language for\n      dealing with large systems, such as the rule analog of\n      \n      block-structured\n      functions.\n      Can you relate any of this to the problem of making deductions in a\n      context (e.g., \"","tag":"#text"},{"body":"If I supposed that ","tag":"#text"},{"body":"$P$","tag":"LATEX"},{"body":"\n      were true, then I would be able to deduce ","tag":"#text"},{"body":"$A$","tag":"LATEX"},{"body":"\n      and ","tag":"#text"},{"body":"$B$","tag":"LATEX"},{"body":".","tag":"#text"},{"body":"\") as a method of problem\n      solving?  (This problem is open-ended.)\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4.4.4#footnote-link-1","child":[{"body":"In general,\n      unifying\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n\t  with an expression involving\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"\n      would require our being able to find a\n      \n      fixed point of the equation\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"$ = \\langle$","tag":"LATEX"},{"tag":"META","body":"expression"},{"tag":"META","body":"involving"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"$\\rangle$","tag":"LATEX"},{"body":".\n\t\n\t      It is sometimes possible to syntactically form an expression that appears\n\t      to be the solution.  For example,\n\t      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":"$=$","tag":"LATEX"},{"tag":"JAVASCRIPTINLINE","body":"list(\"f\", $y)"},{"body":"\n\t  seems to have the fixed point\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"f\", list(\"f\", list(\"f\","},{"body":"…","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":")))"},{"body":",\n\t    \n\t  which we can produce by beginning with the expression\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"f\", $y)"},{"body":"\n\t  and repeatedly substituting\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list(\"f\", $y)"},{"body":"\n\t  for\n\t  ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"$y"},{"body":".\n\t  Unfortunately, not every such equation has a meaningful fixed point.  The\n\t  issues that arise here are similar to the issues of manipulating \n\t  \n\t  infinite series in mathematics.  For example, we know that 2 is the\n\t  solution to the equation ","tag":"#text"},{"body":"$y = 1 + y/2$","tag":"LATEX"},{"body":".\n\t  Beginning with the expression ","tag":"#text"},{"body":"$1 + y/2$","tag":"LATEX"},{"body":" and\n\t  repeatedly substituting ","tag":"#text"},{"body":"$1 + y/2$","tag":"LATEX"},{"body":" for\n\t  ","tag":"#text"},{"body":"$y$","tag":"LATEX"},{"body":" gives\n\t  ","tag":"#text"},{"body":"\n            \\[\n\t    2 \\ = \\ y \\ = \\ 1 + y/2 \\ = \\ 1 + (1+y/2)/2 \\ = \\ 1 + 1/2 + y/4 \\ = \\ \\cdots,\n\t    \\]\n\t  ","tag":"LATEX"},{"body":"\n\t  which leads to\n\t  ","tag":"#text"},{"body":"\n            \\[ 2 \\ = \\  1 + 1/2 + 1/4 + 1/8 +\\cdots. \\]\n\t  ","tag":"LATEX"},{"body":"\n\t  However, if we try the same manipulation beginning with the\n\t  observation that ","tag":"#text"},{"body":"$-1$","tag":"LATEX"},{"body":" is the solution to the\n\t  equation ","tag":"#text"},{"body":"$y \\ = \\  1 + 2y$","tag":"LATEX"},{"body":", we obtain\n\t  ","tag":"#text"},{"body":"\n            \\[ -1 \\ = \\  y \\ = \\  1 + 2y \\ = \\  1 + 2(1 + 2y) \\ = \\  1 + 2 + 4y \\ = \\  \\cdots, \\]\n\t  ","tag":"LATEX"},{"body":"\n\t  which leads to \n\t  ","tag":"#text"},{"body":"\n            \\[ -1 \\ = \\  1 + 2 + 4 + 8 +\\cdots. \\]\n\t  ","tag":"LATEX"},{"body":"\n\t  Although the formal manipulations used in deriving these two equations\n\t  are identical, the first result is a valid assertion about infinite\n\t  series but the second is not.  Similarly, for our unification results,\n\t  reasoning with an arbitrary syntactically constructed expression may\n\t  lead to errors.\n        ","tag":"#text"},{"tag":"TEXT","id":"#p46","child":[{"body":"\n\t    Nevertheless, most logic programming systems today allow\n\t    cyclic references, by accepting the cyclic data structure\n\t    as the result of the match.  This is justified\n\t    theoretically using ","tag":"#text"},{"tag":"EM","child":[{"body":"rational trees","tag":"#text"}]},{"body":"\n\t    (Jaffar and Stuckey 1986).\n\t    Accepting\n\t    a cyclic data structure allows self-referential data, such\n\t    as an employee data structure that refers to the employer,\n\t    which in turn refers to the employee.\n\t    ","tag":"#text"}]}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4.4.4#footnote-link-2","child":[{"body":"The actual way to get the string that\n\tcontains the first\n\tcharacter of a string ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"s"},{"body":" in JavaScript is\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"s.charAt(0)"},{"body":".\n      ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/4.4.4#footnote-link-3","child":[{"body":"Creating\n          new variables with string concatenation and identifying\n          variables by checking their first character during query\n          processing is somewhat wasteful. A more efficient solution\n\t  would mark pattern variables with a separate tag in the\n\t  query-language-specific representation and use pair\n\t  construction rather than string concatenation to create\n\t  new variables. We chose the less efficient solution \n\t  to simplify the presentation.","tag":"#text"}]}]